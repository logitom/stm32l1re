<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\STM32L152RE_Nucleo\udp-sender_l152.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\STM32L152RE_Nucleo\udp-sender_l152.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Fri Oct 26 11:20:27 2018
<BR><P>
<H3>Maximum Stack Usage =        480 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
spirit_radio_init &rArr; SpiritRadioInit &rArr; SpiritRadioSetFrequencyBase &rArr; SpiritManagementWaVcoCalibration &rArr; SpiritManagementSetFrequencyBase &rArr; SpiritCalibrationSelectVco &rArr; RadioSpiWriteRegisters &rArr; SPI_Write &rArr; RadioSpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[33]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[1b]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">BusFault_Handler</a><BR>
 <LI><a href="#[19]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">HardFault_Handler</a><BR>
 <LI><a href="#[1a]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">MemManage_Handler</a><BR>
 <LI><a href="#[1c]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">UsageFault_Handler</a><BR>
 <LI><a href="#[21]">WWDG_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">WWDG_IRQHandler</a><BR>
 <LI><a href="#[17e]">exit_process</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17d]">call_process</a><BR>
 <LI><a href="#[c7]">Error_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c7]">Error_Handler</a><BR>
 <LI><a href="#[1ad]">uip_icmp6_send</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c4]">tcpip_ipv6_output</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[33]">ADC1_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[5b]">ADC_DMAConvCplt</a> from stm32l1xx_hal_adc.o(i.ADC_DMAConvCplt) referenced from stm32l1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[5d]">ADC_DMAError</a> from stm32l1xx_hal_adc.o(i.ADC_DMAError) referenced from stm32l1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[5c]">ADC_DMAHalfConvCplt</a> from stm32l1xx_hal_adc.o(i.ADC_DMAHalfConvCplt) referenced from stm32l1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[1b]">BusFault_Handler</a> from stm32l1xx_it.o(i.BusFault_Handler) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[57]">COMP_ACQ_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[37]">COMP_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[36]">DAC_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[2c]">DMA1_Channel1_IRQHandler</a> from stm32l1xx_it.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[2d]">DMA1_Channel2_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[2e]">DMA1_Channel3_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[2f]">DMA1_Channel4_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[30]">DMA1_Channel5_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[31]">DMA1_Channel6_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[32]">DMA1_Channel7_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[52]">DMA2_Channel1_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[53]">DMA2_Channel2_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[54]">DMA2_Channel3_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[55]">DMA2_Channel4_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[56]">DMA2_Channel5_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[1e]">DebugMon_Handler</a> from stm32l1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[27]">EXTI0_IRQHandler</a> from stm32l1xx_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[49]">EXTI15_10_IRQHandler</a> from stm32l1xx_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[28]">EXTI1_IRQHandler</a> from stm32l1xx_it.o(i.EXTI1_IRQHandler) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[29]">EXTI2_IRQHandler</a> from stm32l1xx_it.o(i.EXTI2_IRQHandler) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[2a]">EXTI3_IRQHandler</a> from stm32l1xx_it.o(i.EXTI3_IRQHandler) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[2b]">EXTI4_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[38]">EXTI9_5_IRQHandler</a> from stm32l1xx_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[25]">FLASH_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[19]">HardFault_Handler</a> from stm32l1xx_it.o(i.HardFault_Handler) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[41]">I2C1_ER_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[40]">I2C1_EV_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[43]">I2C2_ER_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[42]">I2C2_EV_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[39]">LCD_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[1a]">MemManage_Handler</a> from stm32l1xx_it.o(i.MemManage_Handler) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[18]">NMI_Handler</a> from stm32l1xx_it.o(i.NMI_Handler) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[22]">PVD_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[1f]">PendSV_Handler</a> from stm32l1xx_it.o(i.PendSV_Handler) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[26]">RCC_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[4a]">RTC_Alarm_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[24]">RTC_WKUP_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[17]">Reset_Handler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[44]">SPI1_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[45]">SPI2_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[4f]">SPI3_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[1d]">SVC_Handler</a> from stm32l1xx_it.o(i.SVC_Handler) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[20]">SysTick_Handler</a> from stm32l1xx_it.o(i.SysTick_Handler) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[59]">SystemInit</a> from system_stm32l1xx.o(i.SystemInit) referenced from startup_stm32l152xe.o(.text)
 <LI><a href="#[23]">TAMPER_STAMP_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[3b]">TIM10_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[3c]">TIM11_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[3d]">TIM2_IRQHandler</a> from stm32l1xx_it.o(i.TIM2_IRQHandler) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[3e]">TIM3_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[3f]">TIM4_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[4e]">TIM5_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[4c]">TIM6_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[4d]">TIM7_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[3a]">TIM9_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[50]">UART4_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[51]">UART5_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[46]">USART1_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[47]">USART2_IRQHandler</a> from stm32l1xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[48]">USART3_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[4b]">USB_FS_WKUP_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[34]">USB_HP_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[35]">USB_LP_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[1c]">UsageFault_Handler</a> from stm32l1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[21]">WWDG_IRQHandler</a> from stm32l1xx_it.o(i.WWDG_IRQHandler) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[5a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l152xe.o(.text)
 <LI><a href="#[12]">best_dag</a> from rpl-mrhof.o(i.best_dag) referenced 2 times from rpl-mrhof.o(.data)
 <LI><a href="#[11]">best_parent</a> from rpl-mrhof.o(i.best_parent) referenced 2 times from rpl-mrhof.o(.data)
 <LI><a href="#[78]">channel_check_interval</a> from csma.o(i.channel_check_interval) referenced 2 times from csma.o(.constdata)
 <LI><a href="#[84]">configure</a> from button-sensor.o(i.configure) referenced 2 times from button-sensor.o(.constdata)
 <LI><a href="#[7a]">create</a> from framer-802154.o(i.create) referenced from framer-802154.o(.constdata)
 <LI><a href="#[b]">dao_ack_input</a> from rpl-icmp6.o(i.dao_ack_input) referenced 2 times from rpl-icmp6.o(.data)
 <LI><a href="#[a]">dao_input</a> from rpl-icmp6.o(i.dao_input) referenced 2 times from rpl-icmp6.o(.data)
 <LI><a href="#[9]">dio_input</a> from rpl-icmp6.o(i.dio_input) referenced 2 times from rpl-icmp6.o(.data)
 <LI><a href="#[8]">dis_input</a> from rpl-icmp6.o(i.dis_input) referenced 2 times from rpl-icmp6.o(.data)
 <LI><a href="#[6]">echo_reply_input</a> from uip-icmp6.o(i.echo_reply_input) referenced 2 times from uip-icmp6.o(.data)
 <LI><a href="#[5]">echo_request_input</a> from uip-icmp6.o(i.echo_request_input) referenced 2 times from uip-icmp6.o(.data)
 <LI><a href="#[5e]">fputc</a> from console.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[5f]">handle_dao_timer</a> from rpl-timers.o(i.handle_dao_timer) referenced from rpl-timers.o(i.handle_dao_timer)
 <LI><a href="#[5f]">handle_dao_timer</a> from rpl-timers.o(i.handle_dao_timer) referenced from rpl-timers.o(i.schedule_dao)
 <LI><a href="#[5f]">handle_dao_timer</a> from rpl-timers.o(i.handle_dao_timer) referenced from rpl-timers.o(i.set_dao_lifetime_timer)
 <LI><a href="#[60]">handle_dio_timer</a> from rpl-timers.o(i.handle_dio_timer) referenced from rpl-timers.o(i.handle_dio_timer)
 <LI><a href="#[60]">handle_dio_timer</a> from rpl-timers.o(i.handle_dio_timer) referenced from rpl-timers.o(i.new_dio_interval)
 <LI><a href="#[64]">handle_periodic_timer</a> from rpl-timers.o(i.handle_periodic_timer) referenced from rpl-timers.o(i.rpl_reset_periodic_timer)
 <LI><a href="#[6d]">handle_periodic_timer</a> from rpl-nbr-policy.o(i.handle_periodic_timer) referenced from rpl-nbr-policy.o(i.update_nbr)
 <LI><a href="#[65]">handle_probing_timer</a> from rpl-timers.o(i.handle_probing_timer) referenced from rpl-timers.o(i.rpl_schedule_probing)
 <LI><a href="#[66]">handle_unicast_dio_timer</a> from rpl-timers.o(i.handle_unicast_dio_timer) referenced from rpl-timers.o(i.rpl_schedule_unicast_dio_immediately)
 <LI><a href="#[79]">hdr_length</a> from framer-802154.o(i.hdr_length) referenced from framer-802154.o(.constdata)
 <LI><a href="#[70]">init</a> from nullsec.o(i.init) referenced 3 times from nullsec.o(.constdata)
 <LI><a href="#[6f]">input</a> from sicslowpan.o(i.input) referenced 2 times from sicslowpan.o(.constdata)
 <LI><a href="#[75]">input_packet</a> from csma.o(i.input_packet) referenced from csma.o(.constdata)
 <LI><a href="#[58]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[63]">nbr_callback</a> from rpl-dag.o(i.nbr_callback) referenced from rpl-dag.o(i.rpl_dag_init)
 <LI><a href="#[7]">ns_input</a> from uip-nd6.o(i.ns_input) referenced 2 times from uip-nd6.o(.data)
 <LI><a href="#[77]">off</a> from csma.o(i.off) referenced 2 times from csma.o(.constdata)
 <LI><a href="#[76]">on</a> from csma.o(i.on) referenced 2 times from csma.o(.constdata)
 <LI><a href="#[69]">output</a> from sicslowpan.o(i.output) referenced from sicslowpan.o(i.sicslowpan_init)
 <LI><a href="#[7f]">packet_input</a> from nullrdc.o(i.packet_input) referenced from nullrdc.o(.constdata)
 <LI><a href="#[68]">packet_sent</a> from sicslowpan.o(i.packet_sent) referenced from sicslowpan.o(i.send_packet)
 <LI><a href="#[6a]">packet_sent</a> from csma.o(i.packet_sent) referenced from csma.o(i.transmit_packet_list)
 <LI><a href="#[e]">parent_has_usable_link</a> from rpl-mrhof.o(i.parent_has_usable_link) referenced 2 times from rpl-mrhof.o(.data)
 <LI><a href="#[d]">parent_link_metric</a> from rpl-mrhof.o(i.parent_link_metric) referenced 2 times from rpl-mrhof.o(.data)
 <LI><a href="#[f]">parent_path_cost</a> from rpl-mrhof.o(i.parent_path_cost) referenced 2 times from rpl-mrhof.o(.data)
 <LI><a href="#[7b]">parse</a> from framer-802154.o(i.parse) referenced from framer-802154.o(.constdata)
 <LI><a href="#[61]">periodic</a> from link-stats.o(i.periodic) referenced from link-stats.o(i.link_stats_init)
 <LI><a href="#[14]">process_thread_ctimer_process</a> from ctimer.o(i.process_thread_ctimer_process) referenced 2 times from ctimer.o(.data)
 <LI><a href="#[15]">process_thread_etimer_process</a> from etimer.o(i.process_thread_etimer_process) referenced 2 times from etimer.o(.data)
 <LI><a href="#[2]">process_thread_sensors_process</a> from sensors.o(i.process_thread_sensors_process) referenced 2 times from sensors.o(.data)
 <LI><a href="#[1]">process_thread_servreg_hack_process</a> from servreg-hack.o(i.process_thread_servreg_hack_process) referenced 2 times from servreg-hack.o(.data)
 <LI><a href="#[3]">process_thread_simple_udp_process</a> from simple-udp.o(i.process_thread_simple_udp_process) referenced 2 times from simple-udp.o(.data)
 <LI><a href="#[16]">process_thread_spirit_radio_process</a> from spirit1.o(i.process_thread_spirit_radio_process) referenced 2 times from spirit1.o(.data)
 <LI><a href="#[4]">process_thread_tcpip_process</a> from tcpip.o(i.process_thread_tcpip_process) referenced 2 times from tcpip.o(.data)
 <LI><a href="#[0]">process_thread_unicast_sender_process</a> from unicast-sender.o(i.process_thread_unicast_sender_process) referenced 2 times from unicast-sender.o(.data)
 <LI><a href="#[10]">rank_via_parent</a> from rpl-mrhof.o(i.rank_via_parent) referenced 2 times from rpl-mrhof.o(.data)
 <LI><a href="#[62]">receiver</a> from unicast-sender.o(i.receiver) referenced from unicast-sender.o(i.process_thread_unicast_sender_process)
 <LI><a href="#[c]">reset</a> from rpl-mrhof.o(i.reset) referenced 2 times from rpl-mrhof.o(.data)
 <LI><a href="#[6c]">rm_routelist_callback</a> from uip-ds6-route.o(i.rm_routelist_callback) referenced from uip-ds6-route.o(i.uip_ds6_route_init)
 <LI><a href="#[71]">send</a> from nullsec.o(i.send) referenced from nullsec.o(.constdata)
 <LI><a href="#[7e]">send_list</a> from nullrdc.o(i.send_list) referenced from nullrdc.o(.constdata)
 <LI><a href="#[74]">send_packet</a> from csma.o(i.send_packet) referenced 2 times from csma.o(.constdata)
 <LI><a href="#[6e]">sicslowpan_init</a> from sicslowpan.o(i.sicslowpan_init) referenced from sicslowpan.o(.constdata)
 <LI><a href="#[8e]">spirit_radio_channel_clear</a> from spirit1.o(i.spirit_radio_channel_clear) referenced from spirit1.o(.constdata)
 <LI><a href="#[89]">spirit_radio_init</a> from spirit1.o(i.spirit_radio_init) referenced from spirit1.o(.constdata)
 <LI><a href="#[92]">spirit_radio_off</a> from spirit1.o(i.spirit_radio_off) referenced from spirit1.o(.constdata)
 <LI><a href="#[91]">spirit_radio_on</a> from spirit1.o(i.spirit_radio_on) referenced from spirit1.o(.constdata)
 <LI><a href="#[90]">spirit_radio_pending_packet</a> from spirit1.o(i.spirit_radio_pending_packet) referenced from spirit1.o(.constdata)
 <LI><a href="#[8a]">spirit_radio_prepare</a> from spirit1.o(i.spirit_radio_prepare) referenced from spirit1.o(.constdata)
 <LI><a href="#[8d]">spirit_radio_read</a> from spirit1.o(i.spirit_radio_read) referenced from spirit1.o(.constdata)
 <LI><a href="#[8f]">spirit_radio_receiving_packet</a> from spirit1.o(i.spirit_radio_receiving_packet) referenced from spirit1.o(.constdata)
 <LI><a href="#[8c]">spirit_radio_send</a> from spirit1.o(i.spirit_radio_send) referenced from spirit1.o(.constdata)
 <LI><a href="#[8b]">spirit_radio_transmit</a> from spirit1.o(i.spirit_radio_transmit) referenced from spirit1.o(.constdata)
 <LI><a href="#[85]">status</a> from button-sensor.o(i.status) referenced 2 times from button-sensor.o(.constdata)
 <LI><a href="#[67]">transmit_packet_list</a> from csma.o(i.transmit_packet_list) referenced from csma.o(i.schedule_transmission)
 <LI><a href="#[6b]">uip_ds6_nbr_rm</a> from uip-ds6-nbr.o(i.uip_ds6_nbr_rm) referenced from uip-ds6-nbr.o(i.uip_ds6_neighbors_init)
 <LI><a href="#[13]">update_metric_container</a> from rpl-mrhof.o(i.update_metric_container) referenced 2 times from rpl-mrhof.o(.data)
 <LI><a href="#[83]">value</a> from button-sensor.o(i.value) referenced 2 times from button-sensor.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(.text)
</UL>
<P><STRONG><a name="[2a3]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[93]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[af]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2a4]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[2a5]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[2a6]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2a7]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[2a8]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[17]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>COMP_ACQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>USB_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[243]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_rand
</UL>

<P><STRONG><a name="[242]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_init
</UL>

<P><STRONG><a name="[2a9]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_addr_add
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_udp_register
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_copyto
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_copyfrom
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_attr_copyto
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_attr_copyfrom
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_udp_packet
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_incoming_reg
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udp_new
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_simple_udp_process
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udp_packet_sendto
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_maddr_add
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_error_output
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_select_src
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uncompress_addr
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_fragment
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_frags2uip
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compress_hdr_iphc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ns_input
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_send
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_request_input
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_add
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_add
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_add
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_prefix_add
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_prefix
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ip_from_prefix
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_output
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dio_output
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dio_input
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_output_target_seq
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_input_storing
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_read
</UL>

<P><STRONG><a name="[1db]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_parse
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_prefix
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_join_instance
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_dag
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_init
</UL>

<P><STRONG><a name="[1bc]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udp_packet_send
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_error_output
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_ext_hdr
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_header
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_request_input
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_reply_input
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_hbh_header
</UL>

<P><STRONG><a name="[2aa]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[2ab]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[2ac]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2ad]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_attr_clear
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_add_lladdr
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_init
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uncompress_addr
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ip_from_prefix
</UL>

<P><STRONG><a name="[160]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_init
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_alloc_instance
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_alloc_dag
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_frame
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dio_input
</UL>

<P><STRONG><a name="[2ae]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[23c]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_unicast_sender_process
</UL>

<P><STRONG><a name="[177]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_cmp
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_lookup
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_lookup
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_is_addr_onlink
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_context_lookup_by_prefix
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ns_input
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_add
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_lookup
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_list_loop
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_dio
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_dag
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_prefix
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_routes_by_nexthop
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_input_storing
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetdBm2Reg
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_channel_clear
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetdBm2Reg
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioInit
</UL>

<P><STRONG><a name="[13a]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSearchFreqDevME
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetdBm2Reg
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value
</UL>

<P><STRONG><a name="[a0]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetdBm2Reg
</UL>

<P><STRONG><a name="[13f]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSearchFreqDevME
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_channel_clear
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value
</UL>

<P><STRONG><a name="[2af]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSearchFreqDevME
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[a6]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetFrequencyBase
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritManagementSetFrequencyBase
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSetFrequencyBase
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSearchFreqDevME
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetFrequencyBase
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritManagementSetFrequencyBase
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSetFrequencyBase
</UL>

<P><STRONG><a name="[147]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSearchFreqDevME
</UL>

<P><STRONG><a name="[2b0]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_channel_clear
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSearchFreqDevME
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioInit
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetFrequencyBase
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritManagementSetFrequencyBase
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSearchFreqDevME
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetFrequencyBase
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritManagementSetFrequencyBase
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSetFrequencyBase
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSearchFreqDevME
</UL>

<P><STRONG><a name="[13d]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value
</UL>

<P><STRONG><a name="[13b]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSearchFreqDevME
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetdBm2Reg
</UL>

<P><STRONG><a name="[ad]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetFrequencyBase
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritManagementSetFrequencyBase
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSetFrequencyBase
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSearchFreqDevME
</UL>

<P><STRONG><a name="[2b1]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetdBm2Reg
</UL>

<P><STRONG><a name="[139]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetdBm2Reg
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[2b2]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[2b3]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2b4]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[2b5]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[9c]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[a4]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[a3]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ae]"></a>_drnd</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, drnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[2b6]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[248]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[94]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[2b7]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2b8]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2b9]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>ADC_Enable</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32l1xx_hal_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>

<P><STRONG><a name="[b5]"></a>BSP_LED_Init</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, stm32l1xx_nucleo.o(i.BSP_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>BSP_LED_Toggle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_nucleo.o(i.BSP_LED_Toggle))
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>

<P><STRONG><a name="[ba]"></a>BSP_PB_GetState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_nucleo.o(i.BSP_PB_GetState))
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value
</UL>

<P><STRONG><a name="[bc]"></a>BSP_PB_Init</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, stm32l1xx_nucleo.o(i.BSP_PB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_PB_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[1b]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>Contiki_SysTick_Handler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32l1xx_it.o(i.Contiki_SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Contiki_SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_request_poll
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_pending
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;energest_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[2c]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.EXTI0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; sensors_changed &rArr; get_sensor_index
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.EXTI1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l1xx_it.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI2_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; sensors_changed &rArr; get_sensor_index
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.EXTI3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32l1xx_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = EXTI9_5_IRQHandler &rArr; spirit1_interrupt_callback &rArr; SpiritPktBasicGetReceivedPktLength &rArr; SpiritPktCommonGetControlLength &rArr; RadioSpiReadRegisters &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit1_interrupt_callback
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>Error_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cube_hal_l1.o(i.Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = Error_Handler &rArr;  Error_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTConfig
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeStampConfig
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[ff]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, stm32l1xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
</UL>

<P><STRONG><a name="[b0]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i.HAL_ADC_ConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
</UL>

<P><STRONG><a name="[b2]"></a>HAL_ADC_ConvHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_adc.o(i.HAL_ADC_ConvHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAHalfConvCplt
</UL>

<P><STRONG><a name="[b1]"></a>HAL_ADC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_adc.o(i.HAL_ADC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAError
</UL>

<P><STRONG><a name="[c9]"></a>HAL_ADC_Init</STRONG> (Thumb, 390 bytes, Stack size 24 bytes, stm32l1xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
</UL>

<P><STRONG><a name="[ca]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, stm32l1xx_hal_msp.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[cc]"></a>HAL_ADC_Start_DMA</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32l1xx_hal_adc.o(i.HAL_ADC_Start_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_unicast_sender_process
</UL>

<P><STRONG><a name="[20b]"></a>HAL_DBGMCU_EnableDBGStopMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l1xx_hal.o(i.HAL_DBGMCU_EnableDBGStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32l1xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[cb]"></a>HAL_DMA_Init</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, stm32l1xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[cd]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32l1xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>

<P><STRONG><a name="[c8]"></a>HAL_Delay</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32l1xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_unicast_sender_process
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>

<P><STRONG><a name="[c5]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; sensors_changed &rArr; get_sensor_index
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
</UL>

<P><STRONG><a name="[c4]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l1xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; sensors_changed &rArr; get_sensor_index
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[b6]"></a>HAL_GPIO_Init</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, stm32l1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioShieldLedInit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGpioInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTConfig
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[bb]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_GetState
</UL>

<P><STRONG><a name="[b9]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
</UL>

<P><STRONG><a name="[b7]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiWriteRegisters
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiCommandStrobes
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiWriteFifo
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadFifo
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit1_arch_refresh_status
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_init
</UL>

<P><STRONG><a name="[20c]"></a>HAL_GetHalVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_hal.o(i.HAL_GetHalVersion))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[15e]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[d0]"></a>HAL_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d2]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32l1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[d3]"></a>HAL_MspInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32l1xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[106]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGpioInterruptCmd
</UL>

<P><STRONG><a name="[be]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGpioInterruptCmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_init
</UL>

<P><STRONG><a name="[bd]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32l1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGpioInterruptCmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_init
</UL>

<P><STRONG><a name="[d1]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[d6]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, stm32l1xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[d7]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 450 bytes, Stack size 32 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[188]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[162]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[161]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[d8]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[d9]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1872 bytes, Stack size 40 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[db]"></a>HAL_RTC_Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32l1xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[dc]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 92 bytes, Stack size 72 bytes, stm32l1xx_hal_msp.o(i.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[de]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, stm32l1xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetDate &rArr; HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeStampConfig
</UL>

<P><STRONG><a name="[e2]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, stm32l1xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetTime &rArr; HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeStampConfig
</UL>

<P><STRONG><a name="[e1]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32l1xx_hal_rtc_ex.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[e3]"></a>HAL_SPI_DeInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l1xx_hal_spi.o(i.HAL_SPI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SPI_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
</UL>

<P><STRONG><a name="[10a]"></a>HAL_SPI_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_hal_spi.o(i.HAL_SPI_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiInit
</UL>

<P><STRONG><a name="[e5]"></a>HAL_SPI_Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32l1xx_hal_spi_ex.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiInit
</UL>

<P><STRONG><a name="[e4]"></a>HAL_SPI_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_spi.o(i.HAL_SPI_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DeInit
</UL>

<P><STRONG><a name="[e6]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, radio_spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[e7]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, stm32l1xx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
</UL>

<P><STRONG><a name="[e9]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 690 bytes, Stack size 32 bytes, stm32l1xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiWriteRegisters
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiCommandStrobes
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiWriteFifo
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadFifo
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit1_arch_refresh_status
</UL>

<P><STRONG><a name="[187]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[d4]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[ea]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32l1xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_init
</UL>

<P><STRONG><a name="[eb]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32l1xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[276]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_init
</UL>

<P><STRONG><a name="[ed]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, stm32l1xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_init
</UL>

<P><STRONG><a name="[f2]"></a>HAL_TIM_OC_ConfigChannel</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32l1xx_hal_tim.o(i.HAL_TIM_OC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_OC_ConfigChannel &rArr; TIM_OC4_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_init
</UL>

<P><STRONG><a name="[f7]"></a>HAL_TIM_OC_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32l1xx_hal_tim.o(i.HAL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_init
</UL>

<P><STRONG><a name="[f8]"></a>HAL_TIM_OC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_tim.o(i.HAL_TIM_OC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>

<P><STRONG><a name="[f9]"></a>HAL_UART_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32l1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTConfig
</UL>

<P><STRONG><a name="[fa]"></a>HAL_UART_MspInit</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, stm32l1xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[164]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32l1xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTConfig
</UL>

<P><STRONG><a name="[fc]"></a>HAL_UART_Transmit</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, stm32l1xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_char
</UL>

<P><STRONG><a name="[19]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[fe]"></a>MX_ADC_Init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cube_hal_l1.o(i.MX_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_ADC_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[100]"></a>MX_DMA_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cube_hal_l1.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>MX_GPIO_Init</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, cube_hal_l1.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[df]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[e0]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[102]"></a>RTC_Config</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cube_hal_l1.o(i.RTC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RTC_Config &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>RTC_EnterInitMode</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32l1xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[103]"></a>RTC_TimeStampConfig</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, cube_hal_l1.o(i.RTC_TimeStampConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RTC_TimeStampConfig &rArr; HAL_RTC_SetTime &rArr; HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>RadioGpioInit</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, radio_gpio.o(i.RadioGpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RadioGpioInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_init
</UL>

<P><STRONG><a name="[105]"></a>RadioGpioInterruptCmd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, radio_gpio.o(i.RadioGpioInterruptCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RadioGpioInterruptCmd &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiWriteRegisters
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiCommandStrobes
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiWriteFifo
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadFifo
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit1_arch_refresh_status
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_set_ready_state
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_transmit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_read
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_prepare
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_on
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_off
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_channel_clear
</UL>

<P><STRONG><a name="[107]"></a>RadioShieldLedInit</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, radio_shield_config.o(i.RadioShieldLedInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RadioShieldLedInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[108]"></a>RadioSpiCommandStrobes</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, radio_spi.o(i.RadioSpiCommandStrobes))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RadioSpiCommandStrobes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGpioInterruptCmd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritCmdStrobeCommand
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioInit
</UL>

<P><STRONG><a name="[109]"></a>RadioSpiInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, radio_spi.o(i.RadioSpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RadioSpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_GetState
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_init
</UL>

<P><STRONG><a name="[10b]"></a>RadioSpiReadFifo</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, radio_spi.o(i.RadioSpiReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RadioSpiReadFifo &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGpioInterruptCmd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit1_interrupt_callback
</UL>

<P><STRONG><a name="[10c]"></a>RadioSpiReadRegisters</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, radio_spi.o(i.RadioSpiReadRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RadioSpiReadRegisters &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGpioInterruptCmd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritPktCommonGetControlLength
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritPktCommonFilterOnCrc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritPktBasicInit
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritPktBasicGetReceivedPktLength
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritPktBasicGetAddressField
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRefreshStatus
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSetRefDiv
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetRefDiv
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetFrequencyOffset
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetChannelSpace
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetChannel
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritLinearFifoReadNumElementsRxFifo
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritIrqGetStatus
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritIrqClearStatus
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritIrq
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritCalibrationVco
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritCalibrationSetVcoCalDataTx
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritCalibrationSetVcoCalDataRx
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritCalibrationSelectVco
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritCalibrationGetVcoCalData
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritQiSqiCheck
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritQiSetSqiThreshold
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritQiGetRssi
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritQiGetLqi
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritTimerSetRxTimeoutStopCondition
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSetXtalFlag
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSetPALevelMaxIndex
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSetDigDiv
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioPersistenRx
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioInit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetSynthWord
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetDigDiv
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetBand
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioAFCFreezeOnSync
</UL>

<P><STRONG><a name="[10d]"></a>RadioSpiWriteFifo</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, radio_spi.o(i.RadioSpiWriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RadioSpiWriteFifo &rArr; SPI_Write &rArr; RadioSpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGpioInterruptCmd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_prepare
</UL>

<P><STRONG><a name="[10f]"></a>RadioSpiWriteRegisters</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, radio_spi.o(i.RadioSpiWriteRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RadioSpiWriteRegisters &rArr; SPI_Write &rArr; RadioSpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGpioInterruptCmd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritPktCommonFilterOnCrc
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritPktBasicSetPayloadLength
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritPktBasicInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSetRefDiv
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritManagementWaVcoCalibration
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritManagementSetFrequencyBase
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritIrqDeInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritIrq
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritGpioInit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritCalibrationVco
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritCalibrationSetVcoCalDataTx
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritCalibrationSetVcoCalDataRx
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritCalibrationSelectVco
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritQiSqiCheck
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritQiSetSqiThreshold
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritQiSetRssiThresholddBm
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritTimerSetRxTimeoutStopCondition
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritTimerSetRxTimeoutCounter
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSetXtalFlag
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSetPALeveldBm
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSetPALevelMaxIndex
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSetFrequencyBase
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSetDigDiv
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioPersistenRx
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioAFCFreezeOnSync
</UL>

<P><STRONG><a name="[1d]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[110]"></a>SpiritCalibrationGetVcoCalData</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, spirit_calibration.o(i.SpiritCalibrationGetVcoCalData))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SpiritCalibrationGetVcoCalData &rArr; RadioSpiReadRegisters &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritManagementWaVcoCalibration
</UL>

<P><STRONG><a name="[111]"></a>SpiritCalibrationSelectVco</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, spirit_calibration.o(i.SpiritCalibrationSelectVco))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SpiritCalibrationSelectVco &rArr; RadioSpiWriteRegisters &rArr; SPI_Write &rArr; RadioSpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiWriteRegisters
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritManagementSetFrequencyBase
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSetFrequencyBase
</UL>

<P><STRONG><a name="[112]"></a>SpiritCalibrationSetVcoCalDataRx</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, spirit_calibration.o(i.SpiritCalibrationSetVcoCalDataRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SpiritCalibrationSetVcoCalDataRx &rArr; RadioSpiWriteRegisters &rArr; SPI_Write &rArr; RadioSpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiWriteRegisters
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritManagementWaVcoCalibration
</UL>

<P><STRONG><a name="[113]"></a>SpiritCalibrationSetVcoCalDataTx</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, spirit_calibration.o(i.SpiritCalibrationSetVcoCalDataTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SpiritCalibrationSetVcoCalDataTx &rArr; RadioSpiWriteRegisters &rArr; SPI_Write &rArr; RadioSpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiWriteRegisters
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritManagementWaVcoCalibration
</UL>

<P><STRONG><a name="[114]"></a>SpiritCalibrationVco</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, spirit_calibration.o(i.SpiritCalibrationVco))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SpiritCalibrationVco &rArr; RadioSpiWriteRegisters &rArr; SPI_Write &rArr; RadioSpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiWriteRegisters
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritManagementWaVcoCalibration
</UL>

<P><STRONG><a name="[115]"></a>SpiritCmdStrobeCommand</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, spirit_commands.o(i.SpiritCmdStrobeCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SpiritCmdStrobeCommand &rArr; RadioSpiCommandStrobes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiCommandStrobes
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritManagementWaVcoCalibration
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit1_interrupt_callback
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_set_ready_state
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_transmit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_read
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_prepare
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_on
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_off
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_channel_clear
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_spirit_radio_process
</UL>

<P><STRONG><a name="[116]"></a>SpiritGpioInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, spirit_gpio.o(i.SpiritGpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SpiritGpioInit &rArr; RadioSpiWriteRegisters &rArr; SPI_Write &rArr; RadioSpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiWriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_init
</UL>

<P><STRONG><a name="[117]"></a>SpiritIrq</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, spirit_irq.o(i.SpiritIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SpiritIrq &rArr; RadioSpiWriteRegisters &rArr; SPI_Write &rArr; RadioSpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiWriteRegisters
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_init
</UL>

<P><STRONG><a name="[118]"></a>SpiritIrqClearStatus</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, spirit_irq.o(i.SpiritIrqClearStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SpiritIrqClearStatus &rArr; RadioSpiReadRegisters &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit1_interrupt_callback
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_set_ready_state
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_transmit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_off
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_channel_clear
</UL>

<P><STRONG><a name="[119]"></a>SpiritIrqDeInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, spirit_irq.o(i.SpiritIrqDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SpiritIrqDeInit &rArr; RadioSpiWriteRegisters &rArr; SPI_Write &rArr; RadioSpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiWriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_init
</UL>

<P><STRONG><a name="[11a]"></a>SpiritIrqGetStatus</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, spirit_irq.o(i.SpiritIrqGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SpiritIrqGetStatus &rArr; RadioSpiReadRegisters &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit1_interrupt_callback
</UL>

<P><STRONG><a name="[11b]"></a>SpiritLinearFifoReadNumElementsRxFifo</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, spirit_linearfifo.o(i.SpiritLinearFifoReadNumElementsRxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SpiritLinearFifoReadNumElementsRxFifo &rArr; RadioSpiReadRegisters &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit1_interrupt_callback
</UL>

<P><STRONG><a name="[11c]"></a>SpiritManagementSetFrequencyBase</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, spirit_management.o(i.SpiritManagementSetFrequencyBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SpiritManagementSetFrequencyBase &rArr; SpiritCalibrationSelectVco &rArr; RadioSpiWriteRegisters &rArr; SPI_Write &rArr; RadioSpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSearchWCP
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetXtalFrequency
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetRefDiv
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetFrequencyOffset
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetChannelSpace
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetChannel
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritCalibrationSelectVco
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiWriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritManagementWaVcoCalibration
</UL>

<P><STRONG><a name="[140]"></a>SpiritManagementWaTRxFcMem</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spirit_management.o(i.SpiritManagementWaTRxFcMem))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioInit
</UL>

<P><STRONG><a name="[123]"></a>SpiritManagementWaVcoCalibration</STRONG> (Thumb, 316 bytes, Stack size 64 bytes, spirit_management.o(i.SpiritManagementWaVcoCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SpiritManagementWaVcoCalibration &rArr; SpiritManagementSetFrequencyBase &rArr; SpiritCalibrationSelectVco &rArr; RadioSpiWriteRegisters &rArr; SPI_Write &rArr; RadioSpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRefreshStatus
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSetRefDiv
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetXtalFrequency
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetRefDiv
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetFrequencyBase
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritManagementSetFrequencyBase
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritCmdStrobeCommand
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritCalibrationVco
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritCalibrationSetVcoCalDataTx
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritCalibrationSetVcoCalDataRx
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritCalibrationGetVcoCalData
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiWriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSetFrequencyBase
</UL>

<P><STRONG><a name="[127]"></a>SpiritPktBasicGetAddressField</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, spirit_pktbasic.o(i.SpiritPktBasicGetAddressField))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SpiritPktBasicGetAddressField &rArr; RadioSpiReadRegisters &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritPktBasicSetPayloadLength
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritPktBasicGetReceivedPktLength
</UL>

<P><STRONG><a name="[128]"></a>SpiritPktBasicGetReceivedPktLength</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, spirit_pktbasic.o(i.SpiritPktBasicGetReceivedPktLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SpiritPktBasicGetReceivedPktLength &rArr; SpiritPktCommonGetControlLength &rArr; RadioSpiReadRegisters &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritPktCommonGetControlLength
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritPktBasicGetAddressField
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit1_interrupt_callback
</UL>

<P><STRONG><a name="[12a]"></a>SpiritPktBasicInit</STRONG> (Thumb, 536 bytes, Stack size 24 bytes, spirit_pktbasic.o(i.SpiritPktBasicInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SpiritPktBasicInit &rArr; SpiritPktCommonFilterOnCrc &rArr; RadioSpiWriteRegisters &rArr; SPI_Write &rArr; RadioSpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritPktCommonFilterOnCrc
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiWriteRegisters
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_init
</UL>

<P><STRONG><a name="[12c]"></a>SpiritPktBasicSetPayloadLength</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, spirit_pktbasic.o(i.SpiritPktBasicSetPayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SpiritPktBasicSetPayloadLength &rArr; RadioSpiWriteRegisters &rArr; SPI_Write &rArr; RadioSpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritPktCommonGetControlLength
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritPktBasicGetAddressField
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiWriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_prepare
</UL>

<P><STRONG><a name="[12b]"></a>SpiritPktCommonFilterOnCrc</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, spirit_pktcommon.o(i.SpiritPktCommonFilterOnCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SpiritPktCommonFilterOnCrc &rArr; RadioSpiWriteRegisters &rArr; SPI_Write &rArr; RadioSpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiWriteRegisters
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritPktBasicInit
</UL>

<P><STRONG><a name="[129]"></a>SpiritPktCommonGetControlLength</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, spirit_pktcommon.o(i.SpiritPktCommonGetControlLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SpiritPktCommonGetControlLength &rArr; RadioSpiReadRegisters &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritPktBasicSetPayloadLength
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritPktBasicGetReceivedPktLength
</UL>

<P><STRONG><a name="[12d]"></a>SpiritQiGetLqi</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, spirit_qi.o(i.SpiritQiGetLqi))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SpiritQiGetLqi &rArr; RadioSpiReadRegisters &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit1_interrupt_callback
</UL>

<P><STRONG><a name="[12e]"></a>SpiritQiGetRssi</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, spirit_qi.o(i.SpiritQiGetRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SpiritQiGetRssi &rArr; RadioSpiReadRegisters &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit1_interrupt_callback
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_channel_clear
</UL>

<P><STRONG><a name="[12f]"></a>SpiritQiSetRssiThresholddBm</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, spirit_qi.o(i.SpiritQiSetRssiThresholddBm))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SpiritQiSetRssiThresholddBm &rArr; RadioSpiWriteRegisters &rArr; SPI_Write &rArr; RadioSpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiWriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_init
</UL>

<P><STRONG><a name="[130]"></a>SpiritQiSetSqiThreshold</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, spirit_qi.o(i.SpiritQiSetSqiThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SpiritQiSetSqiThreshold &rArr; RadioSpiWriteRegisters &rArr; SPI_Write &rArr; RadioSpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiWriteRegisters
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_init
</UL>

<P><STRONG><a name="[131]"></a>SpiritQiSqiCheck</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, spirit_qi.o(i.SpiritQiSqiCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SpiritQiSqiCheck &rArr; RadioSpiWriteRegisters &rArr; SPI_Write &rArr; RadioSpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiWriteRegisters
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_init
</UL>

<P><STRONG><a name="[132]"></a>SpiritRadioAFCFreezeOnSync</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, spirit_radio.o(i.SpiritRadioAFCFreezeOnSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SpiritRadioAFCFreezeOnSync &rArr; RadioSpiWriteRegisters &rArr; SPI_Write &rArr; RadioSpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiWriteRegisters
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_init
</UL>

<P><STRONG><a name="[133]"></a>SpiritRadioGetBand</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, spirit_radio.o(i.SpiritRadioGetBand))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SpiritRadioGetBand &rArr; RadioSpiReadRegisters &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetFrequencyBase
</UL>

<P><STRONG><a name="[11f]"></a>SpiritRadioGetChannel</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, spirit_radio.o(i.SpiritRadioGetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SpiritRadioGetChannel &rArr; RadioSpiReadRegisters &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritManagementSetFrequencyBase
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSetFrequencyBase
</UL>

<P><STRONG><a name="[11e]"></a>SpiritRadioGetChannelSpace</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, spirit_radio.o(i.SpiritRadioGetChannelSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SpiritRadioGetChannelSpace &rArr; RadioSpiReadRegisters &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritManagementSetFrequencyBase
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSetFrequencyBase
</UL>

<P><STRONG><a name="[134]"></a>SpiritRadioGetDigDiv</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, spirit_radio.o(i.SpiritRadioGetDigDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SpiritRadioGetDigDiv &rArr; RadioSpiReadRegisters &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSearchDatarateME
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSearchChannelBwME
</UL>

<P><STRONG><a name="[124]"></a>SpiritRadioGetFrequencyBase</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, spirit_radio.o(i.SpiritRadioGetFrequencyBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SpiritRadioGetFrequencyBase &rArr; SpiritRadioGetRefDiv &rArr; RadioSpiReadRegisters &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetRefDiv
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetSynthWord
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetBand
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritManagementWaVcoCalibration
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSetPALeveldBm
</UL>

<P><STRONG><a name="[11d]"></a>SpiritRadioGetFrequencyOffset</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, spirit_radio.o(i.SpiritRadioGetFrequencyOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SpiritRadioGetFrequencyOffset &rArr; RadioSpiReadRegisters &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritManagementSetFrequencyBase
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSetFrequencyBase
</UL>

<P><STRONG><a name="[120]"></a>SpiritRadioGetRefDiv</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, spirit_radio.o(i.SpiritRadioGetRefDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SpiritRadioGetRefDiv &rArr; RadioSpiReadRegisters &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetFrequencyBase
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritManagementWaVcoCalibration
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritManagementSetFrequencyBase
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSetFrequencyBase
</UL>

<P><STRONG><a name="[135]"></a>SpiritRadioGetSynthWord</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, spirit_radio.o(i.SpiritRadioGetSynthWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SpiritRadioGetSynthWord &rArr; RadioSpiReadRegisters &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetFrequencyBase
</UL>

<P><STRONG><a name="[122]"></a>SpiritRadioGetXtalFrequency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spirit_radio.o(i.SpiritRadioGetXtalFrequency))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritManagementWaVcoCalibration
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritManagementSetFrequencyBase
</UL>

<P><STRONG><a name="[137]"></a>SpiritRadioGetdBm2Reg</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, spirit_radio.o(i.SpiritRadioGetdBm2Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SpiritRadioGetdBm2Reg &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSetPALeveldBm
</UL>

<P><STRONG><a name="[13c]"></a>SpiritRadioInit</STRONG> (Thumb, 816 bytes, Stack size 104 bytes, spirit_radio.o(i.SpiritRadioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = SpiritRadioInit &rArr; SpiritRadioSetFrequencyBase &rArr; SpiritManagementWaVcoCalibration &rArr; SpiritManagementSetFrequencyBase &rArr; SpiritCalibrationSelectVco &rArr; RadioSpiWriteRegisters &rArr; SPI_Write &rArr; RadioSpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRefreshStatus
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritManagementWaTRxFcMem
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiWriteRegisters
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiCommandStrobes
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSetXtalFlag
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSetFrequencyBase
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSetDigDiv
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSearchFreqDevME
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSearchDatarateME
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSearchChannelBwME
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioAFCFreezeOnSync
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_init
</UL>

<P><STRONG><a name="[146]"></a>SpiritRadioPersistenRx</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, spirit_radio.o(i.SpiritRadioPersistenRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SpiritRadioPersistenRx &rArr; RadioSpiWriteRegisters &rArr; SPI_Write &rArr; RadioSpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiWriteRegisters
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_init
</UL>

<P><STRONG><a name="[143]"></a>SpiritRadioSearchChannelBwME</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, spirit_radio.o(i.SpiritRadioSearchChannelBwME))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SpiritRadioSearchChannelBwME &rArr; SpiritRadioGetDigDiv &rArr; RadioSpiReadRegisters &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetDigDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioInit
</UL>

<P><STRONG><a name="[141]"></a>SpiritRadioSearchDatarateME</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, spirit_radio.o(i.SpiritRadioSearchDatarateME))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SpiritRadioSearchDatarateME &rArr; SpiritRadioGetDigDiv &rArr; RadioSpiReadRegisters &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetDigDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioInit
</UL>

<P><STRONG><a name="[142]"></a>SpiritRadioSearchFreqDevME</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, spirit_radio.o(i.SpiritRadioSearchFreqDevME))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SpiritRadioSearchFreqDevME &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioInit
</UL>

<P><STRONG><a name="[121]"></a>SpiritRadioSearchWCP</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, spirit_radio.o(i.SpiritRadioSearchWCP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SpiritRadioSearchWCP
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritManagementSetFrequencyBase
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSetFrequencyBase
</UL>

<P><STRONG><a name="[13e]"></a>SpiritRadioSetDigDiv</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, spirit_radio.o(i.SpiritRadioSetDigDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SpiritRadioSetDigDiv &rArr; RadioSpiWriteRegisters &rArr; SPI_Write &rArr; RadioSpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiWriteRegisters
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioInit
</UL>

<P><STRONG><a name="[145]"></a>SpiritRadioSetFrequencyBase</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, spirit_radio.o(i.SpiritRadioSetFrequencyBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = SpiritRadioSetFrequencyBase &rArr; SpiritManagementWaVcoCalibration &rArr; SpiritManagementSetFrequencyBase &rArr; SpiritCalibrationSelectVco &rArr; RadioSpiWriteRegisters &rArr; SPI_Write &rArr; RadioSpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSearchWCP
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetRefDiv
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetFrequencyOffset
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetChannelSpace
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetChannel
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritManagementWaVcoCalibration
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritCalibrationSelectVco
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiWriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioInit
</UL>

<P><STRONG><a name="[148]"></a>SpiritRadioSetPALevelMaxIndex</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, spirit_radio.o(i.SpiritRadioSetPALevelMaxIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SpiritRadioSetPALevelMaxIndex &rArr; RadioSpiWriteRegisters &rArr; SPI_Write &rArr; RadioSpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiWriteRegisters
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_init
</UL>

<P><STRONG><a name="[149]"></a>SpiritRadioSetPALeveldBm</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, spirit_radio.o(i.SpiritRadioSetPALeveldBm))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SpiritRadioSetPALeveldBm &rArr; RadioSpiWriteRegisters &rArr; SPI_Write &rArr; RadioSpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetFrequencyBase
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiWriteRegisters
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetdBm2Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_init
</UL>

<P><STRONG><a name="[125]"></a>SpiritRadioSetRefDiv</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, spirit_radio.o(i.SpiritRadioSetRefDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SpiritRadioSetRefDiv &rArr; RadioSpiWriteRegisters &rArr; SPI_Write &rArr; RadioSpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiWriteRegisters
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritManagementWaVcoCalibration
</UL>

<P><STRONG><a name="[144]"></a>SpiritRadioSetXtalFlag</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, spirit_radio.o(i.SpiritRadioSetXtalFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SpiritRadioSetXtalFlag &rArr; RadioSpiWriteRegisters &rArr; SPI_Write &rArr; RadioSpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiWriteRegisters
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioInit
</UL>

<P><STRONG><a name="[280]"></a>SpiritRadioSetXtalFrequency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spirit_radio.o(i.SpiritRadioSetXtalFrequency))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_init
</UL>

<P><STRONG><a name="[126]"></a>SpiritRefreshStatus</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, spirit_types.o(i.SpiritRefreshStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SpiritRefreshStatus &rArr; RadioSpiReadRegisters &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritManagementWaVcoCalibration
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_channel_clear
</UL>

<P><STRONG><a name="[14a]"></a>SpiritTimerSetRxTimeoutCounter</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, spirit_timer.o(i.SpiritTimerSetRxTimeoutCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SpiritTimerSetRxTimeoutCounter &rArr; RadioSpiWriteRegisters &rArr; SPI_Write &rArr; RadioSpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiWriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_init
</UL>

<P><STRONG><a name="[14b]"></a>SpiritTimerSetRxTimeoutStopCondition</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, spirit_timer.o(i.SpiritTimerSetRxTimeoutStopCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SpiritTimerSetRxTimeoutStopCondition &rArr; RadioSpiWriteRegisters &rArr; SPI_Write &rArr; RadioSpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiWriteRegisters
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_init
</UL>

<P><STRONG><a name="[14c]"></a>Stack_6LoWPAN_Init</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, contiki-spirit1-main.o(i.Stack_6LoWPAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Stack_6LoWPAN_Init &rArr; uip_ds6_addr_add &rArr; uip_ds6_maddr_add &rArr; uip_ds6_list_loop &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_set_addr_iid
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_addr_add
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netstack_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_set_node_addr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_start
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;energest_init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autostart_start
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_start
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_id_restore
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_parameters
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_init
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32l1xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; Contiki_SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contiki_SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[15f]"></a>SystemClock_Config</STRONG> (Thumb, 130 bytes, Stack size 88 bytes, cube_hal_l1.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>SystemInit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, system_stm32l1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(.text)
</UL>
<P><STRONG><a name="[3d]"></a>TIM2_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.TIM2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>USART2_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32l1xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[163]"></a>USARTConfig</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, stm32l1xx_hal_msp.o(i.USARTConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USARTConfig &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>WWDG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.WWDG_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[165]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2ba]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[1f0]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_debug_ipaddr_print
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_global_address
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiver
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_incoming_reg
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_parameters
</UL>

<P><STRONG><a name="[2bb]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[2bc]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[2bd]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[15c]"></a>autostart_start</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, autostart.o(i.autostart_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = autostart_start &rArr; process_start &rArr; process_post_synch &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_start
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stack_6LoWPAN_Init
</UL>

<P><STRONG><a name="[14d]"></a>clock_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, clock.o(i.clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clock_init &rArr; HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stack_6LoWPAN_Init
</UL>

<P><STRONG><a name="[284]"></a>clock_seconds</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(i.clock_seconds))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stimer_set
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stimer_expired
</UL>

<P><STRONG><a name="[1e2]"></a>clock_time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(i.clock_time))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expired
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_stats_packet_sent
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_stats_is_fresh
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_restart
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_time
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_probing_target
</UL>

<P><STRONG><a name="[282]"></a>clock_wait</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, clock.o(i.clock_wait))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_transmit
</UL>

<P><STRONG><a name="[14e]"></a>ctimer_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ctimer.o(i.ctimer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ctimer_init &rArr; process_start &rArr; process_post_synch &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_start
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stack_6LoWPAN_Init
</UL>

<P><STRONG><a name="[19a]"></a>ctimer_reset</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ctimer.o(i.ctimer_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctimer_reset &rArr; etimer_reset &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_reset
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periodic
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_periodic_timer
</UL>

<P><STRONG><a name="[19d]"></a>ctimer_restart</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ctimer.o(i.ctimer_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctimer_restart &rArr; etimer_restart &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_restart
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_periodic_timer
</UL>

<P><STRONG><a name="[19f]"></a>ctimer_set</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ctimer.o(i.ctimer_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_set_with_process
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_stats_init
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_transmission
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_schedule_probing
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_reset_periodic_timer
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_nbr
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dao_lifetime_timer
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_dao
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_dio_interval
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dio_timer
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dao_timer
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_schedule_unicast_dio_immediately
</UL>

<P><STRONG><a name="[1a0]"></a>ctimer_set_with_process</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ctimer.o(i.ctimer_set_with_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_set
</UL>

<P><STRONG><a name="[1a2]"></a>ctimer_stop</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ctimer.o(i.ctimer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ctimer_stop &rArr; etimer_stop &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_packet
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dao_timer
</UL>

<P><STRONG><a name="[1ae]"></a>dao_output</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, rpl-icmp6.o(i.dao_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = dao_output &rArr; dao_output_target &rArr; dao_output_target_seq &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_output_target
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_select_dag
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_nullify_parent
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dao_timer
</UL>

<P><STRONG><a name="[1af]"></a>dao_output_target</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rpl-icmp6.o(i.dao_output_target))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = dao_output_target &rArr; dao_output_target_seq &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_output_target_seq
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_output
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_purge_routes
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_hbh_header
</UL>

<P><STRONG><a name="[1b5]"></a>dio_output</STRONG> (Thumb, 496 bytes, Stack size 48 bytes, rpl-icmp6.o(i.dio_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = dio_output &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_send
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set32
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set16
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_unicast_dio_timer
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probing_timer
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dio_timer
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_input
</UL>

<P><STRONG><a name="[1b9]"></a>dis_output</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, rpl-icmp6.o(i.dis_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = dis_output &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_send
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_periodic_timer
</UL>

<P><STRONG><a name="[c0]"></a>energest_flush</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, energest.o(i.energest_flush))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contiki_SysTick_Handler
</UL>

<P><STRONG><a name="[157]"></a>energest_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, energest.o(i.energest_init))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stack_6LoWPAN_Init
</UL>

<P><STRONG><a name="[277]"></a>etimer_expiration_time</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, etimer.o(i.etimer_expiration_time))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_dao
</UL>

<P><STRONG><a name="[1c3]"></a>etimer_expired</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, etimer.o(i.etimer_expired))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_unicast_sender_process
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_periodic_tcp_timer
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventhandler
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_dao
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dao_timer
</UL>

<P><STRONG><a name="[c1]"></a>etimer_pending</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, etimer.o(i.etimer_pending))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contiki_SysTick_Handler
</UL>

<P><STRONG><a name="[c2]"></a>etimer_request_poll</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, etimer.o(i.etimer_request_poll))
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_poll
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contiki_SysTick_Handler
</UL>

<P><STRONG><a name="[19b]"></a>etimer_reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, etimer.o(i.etimer_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = etimer_reset &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_reset
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_unicast_sender_process
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_servreg_hack_process
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_periodic
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_reset
</UL>

<P><STRONG><a name="[19e]"></a>etimer_restart</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, etimer.o(i.etimer_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = etimer_restart &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_restart
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_periodic_tcp_timer
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventhandler
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_restart
</UL>

<P><STRONG><a name="[1a1]"></a>etimer_set</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, etimer.o(i.etimer_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_unicast_sender_process
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_servreg_hack_process
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_tcpip_process
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_set_with_process
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_ctimer_process
</UL>

<P><STRONG><a name="[1a3]"></a>etimer_stop</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, etimer.o(i.etimer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = etimer_stop &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_time
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_stop
</UL>

<P><STRONG><a name="[1d3]"></a>find_removable_dao</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rpl-nbr-policy.o(i.find_removable_dao))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = find_removable_dao &rArr; update_nbr &rArr; uip_ds6_route_is_nexthop &rArr; uip_ds6_nbr_lladdr_from_ipaddr &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_nbr
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_nbr_policy_find_removable
</UL>

<P><STRONG><a name="[1d5]"></a>find_removable_dio</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rpl-nbr-policy.o(i.find_removable_dio))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = find_removable_dio &rArr; update_nbr &rArr; uip_ds6_route_is_nexthop &rArr; uip_ds6_nbr_lladdr_from_ipaddr &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_instance
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_nbr
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_nbr_policy_find_removable
</UL>

<P><STRONG><a name="[1d6]"></a>find_removable_dis</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rpl-nbr-policy.o(i.find_removable_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = find_removable_dis &rArr; update_nbr &rArr; uip_ds6_route_is_nexthop &rArr; uip_ds6_nbr_lladdr_from_ipaddr &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_nbr
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_nbr_policy_find_removable
</UL>

<P><STRONG><a name="[5e]"></a>fputc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, console.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; uart_send_char &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[198]"></a>frame802154_create</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, frame802154.o(i.frame802154_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = frame802154_create &rArr; field_len &rArr; frame802154_has_panid
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_create_fcf
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_len
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_frame
</UL>

<P><STRONG><a name="[1d8]"></a>frame802154_create_fcf</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, frame802154.o(i.frame802154_create_fcf))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_create
</UL>

<P><STRONG><a name="[18e]"></a>frame802154_get_pan_id</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, frame802154.o(i.frame802154_get_pan_id))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_frame
</UL>

<P><STRONG><a name="[1cc]"></a>frame802154_has_panid</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, frame802154.o(i.frame802154_has_panid))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = frame802154_has_panid
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_parse
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_len
</UL>

<P><STRONG><a name="[195]"></a>frame802154_hdrlen</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, frame802154.o(i.frame802154_hdrlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = frame802154_hdrlen &rArr; field_len &rArr; frame802154_has_panid
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_len
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_frame
</UL>

<P><STRONG><a name="[22d]"></a>frame802154_is_broadcast_addr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, frame802154.o(i.frame802154_is_broadcast_addr))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse
</UL>

<P><STRONG><a name="[1d9]"></a>frame802154_parse</STRONG> (Thumb, 286 bytes, Stack size 48 bytes, frame802154.o(i.frame802154_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = frame802154_parse &rArr; frame802154_has_panid
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_copy
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_parse_fcf
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_has_panid
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse
</UL>

<P><STRONG><a name="[1da]"></a>frame802154_parse_fcf</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, frame802154.o(i.frame802154_parse_fcf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = frame802154_parse_fcf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_parse
</UL>

<P><STRONG><a name="[298]"></a>get_match_length</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, uip-ds6.o(i.get_match_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_match_length
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_select_src
</UL>

<P><STRONG><a name="[1e0]"></a>get_probing_delay</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rpl-timers.o(i.get_probing_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_probing_delay &rArr; random_rand
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_rand
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_schedule_probing
</UL>

<P><STRONG><a name="[1e1]"></a>get_probing_target</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, rpl-timers.o(i.get_probing_target))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = get_probing_target &rArr; rpl_parent_is_fresh &rArr; rpl_get_parent_link_stats &rArr; link_stats_from_lladdr &rArr; nbr_table_get_from_lladdr &rArr; index_from_lladdr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_next
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_head
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_rand
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_rank_via_parent
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_parent_is_fresh
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_parent_link_stats
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probing_timer
</UL>

<P><STRONG><a name="[204]"></a>link_stats_from_lladdr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, link-stats.o(i.link_stats_from_lladdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = link_stats_from_lladdr &rArr; nbr_table_get_from_lladdr &rArr; index_from_lladdr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_get_from_lladdr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_parent_link_stats
</UL>

<P><STRONG><a name="[205]"></a>link_stats_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, link-stats.o(i.link_stats_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = link_stats_init &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_register
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_neighbors_init
</UL>

<P><STRONG><a name="[1f9]"></a>link_stats_input_callback</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, link-stats.o(i.link_stats_input_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = link_stats_input_callback &rArr; nbr_table_add_lladdr &rArr; nbr_table_allocate &rArr; rpl_nbr_policy_find_removable &rArr; find_removable_dao &rArr; update_nbr &rArr; uip_ds6_route_is_nexthop &rArr; uip_ds6_nbr_lladdr_from_ipaddr &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_attr
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_get_from_lladdr
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_add_lladdr
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input
</UL>

<P><STRONG><a name="[208]"></a>link_stats_is_fresh</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, link-stats.o(i.link_stats_is_fresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = link_stats_is_fresh
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_stats_packet_sent
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_parent_is_fresh
</UL>

<P><STRONG><a name="[209]"></a>link_stats_packet_sent</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, link-stats.o(i.link_stats_packet_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = link_stats_packet_sent &rArr; nbr_table_add_lladdr &rArr; nbr_table_allocate &rArr; rpl_nbr_policy_find_removable &rArr; find_removable_dao &rArr; update_nbr &rArr; uip_ds6_route_is_nexthop &rArr; uip_ds6_nbr_lladdr_from_ipaddr &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_get_from_lladdr
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_add_lladdr
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_stats_is_fresh
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_link_neighbor_callback
</UL>

<P><STRONG><a name="[16b]"></a>linkaddr_cmp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, linkaddr.o(i.linkaddr_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_holds_broadcast
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_from_lladdr
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_link_neighbor_callback
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_fragment
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_input
</UL>

<P><STRONG><a name="[16f]"></a>linkaddr_copy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, linkaddr.o(i.linkaddr_copy))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_set_addr
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_attr_clear
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_add_lladdr
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_fragment
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_parse
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_frame
</UL>

<P><STRONG><a name="[155]"></a>linkaddr_set_node_addr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, linkaddr.o(i.linkaddr_set_node_addr))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stack_6LoWPAN_Init
</UL>

<P><STRONG><a name="[19c]"></a>list_add</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, list.o(i.list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tail
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_add_lladdr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_incoming_reg
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_reset
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_register_input_handler
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_add
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_set_with_process
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_restart
</UL>

<P><STRONG><a name="[180]"></a>list_head</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, list.o(i.list_head))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_head
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_allocate
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_from_lladdr
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servreg_hack_list_head
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_udp_packet
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;purge_registrations
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_rm
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_lookup
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_choose
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_input
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_packet_list
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_sent
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_packet
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_reply_input
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_head
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_rm
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_lookup
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm_routelist
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_route_callback
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_periodic
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_ctimer_process
</UL>

<P><STRONG><a name="[199]"></a>list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.list_init))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servreg_hack_init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_add
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_init
</UL>

<P><STRONG><a name="[181]"></a>list_item_next</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, list.o(i.list_item_next))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servreg_hack_lookup
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_next
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_allocate
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_from_lladdr
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_udp_packet
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;purge_registrations
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_incoming_reg
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_rm
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_choose
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_input
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_sent
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_reply_input
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_next
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_rm
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_lookup
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_route_callback
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_periodic
</UL>

<P><STRONG><a name="[182]"></a>list_length</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, list.o(i.list_length))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_route_callback
</UL>

<P><STRONG><a name="[1ee]"></a>list_push</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, list.o(i.list_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = list_push
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_incoming_reg
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_lookup
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_add
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_add
</UL>

<P><STRONG><a name="[1a4]"></a>list_remove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_key
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_push
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;purge_registrations
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_incoming_reg
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_rm
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_lookup
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_stop
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_packet
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_rm
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_ctimer_process
</UL>

<P><STRONG><a name="[20a]"></a>list_tail</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, list.o(i.list_tail))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>

<P><STRONG><a name="[279]"></a>mac_call_sent_callback</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mac.o(i.mac_call_sent_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mac_call_sent_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_one_packet
</UL>

<P><STRONG><a name="[58]"></a>main</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = main &rArr; RTC_Config &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetHalVersion
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_EnableDBGStopMode
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioShieldLedInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_run
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTConfig
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stack_6LoWPAN_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeStampConfig
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1ef]"></a>memb_alloc</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, memb.o(i.memb_alloc))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_allocate
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_incoming_reg
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_new_from_packetbuf
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_add
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_add
</UL>

<P><STRONG><a name="[1de]"></a>memb_free</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, memb.o(i.memb_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memb_free
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;purge_registrations
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_rm
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_new_from_packetbuf
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_free
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_packet
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_add
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_rm
</UL>

<P><STRONG><a name="[1f8]"></a>memb_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, memb.o(i.memb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memb_init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servreg_hack_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_init
</UL>

<P><STRONG><a name="[23f]"></a>memb_inmemb</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, memb.o(i.memb_inmemb))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_to_packetbuf
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_free
</UL>

<P><STRONG><a name="[240]"></a>memb_numfree</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, memb.o(i.memb_numfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memb_numfree
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_numfree
</UL>

<P><STRONG><a name="[207]"></a>nbr_table_add_lladdr</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, nbr-table.o(i.nbr_table_add_lladdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = nbr_table_add_lladdr &rArr; nbr_table_allocate &rArr; rpl_nbr_policy_find_removable &rArr; find_removable_dao &rArr; update_nbr &rArr; uip_ds6_route_is_nexthop &rArr; uip_ds6_nbr_lladdr_from_ipaddr &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_allocate
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_set_bit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_from_index
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_from_lladdr
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_from_key
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_copy
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_stats_packet_sent
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_stats_input_callback
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_add
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_add
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_parent
</UL>

<P><STRONG><a name="[1d1]"></a>nbr_table_get_from_lladdr</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nbr-table.o(i.nbr_table_get_from_lladdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = nbr_table_get_from_lladdr &rArr; index_from_lladdr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_get_bit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_from_index
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_from_lladdr
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_stats_packet_sent
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_stats_input_callback
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_stats_from_lladdr
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_verify_hbh_header
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_is_nexthop
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_add
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_ll_lookup
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_parent
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_parent_any_dag_any_instance
</UL>

<P><STRONG><a name="[214]"></a>nbr_table_get_lladdr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nbr-table.o(i.nbr_table_get_lladdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nbr_table_get_lladdr &rArr; key_from_item
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_from_item
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_nexthop
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_get_ll
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_parent_lladdr
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_nbr
</UL>

<P><STRONG><a name="[179]"></a>nbr_table_head</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nbr-table.o(i.nbr_table_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_next
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_get_bit
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_from_key
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_lookup
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periodic
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_recalculate_ranks
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_local_repair
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_parents
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;best_parent
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_nbr
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_probing_target
</UL>

<P><STRONG><a name="[215]"></a>nbr_table_lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nbr-table.o(i.nbr_table_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nbr_table_lock &rArr; nbr_set_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_set_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_add
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_preferred_parent
</UL>

<P><STRONG><a name="[17b]"></a>nbr_table_next</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nbr-table.o(i.nbr_table_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_get_bit
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_from_item
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_from_key
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_head
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_lookup
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periodic
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_recalculate_ranks
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_local_repair
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_parents
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;best_parent
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_nbr
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_probing_target
</UL>

<P><STRONG><a name="[206]"></a>nbr_table_register</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nbr-table.o(i.nbr_table_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nbr_table_register
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_stats_init
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_init
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_neighbors_init
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_dag_init
</UL>

<P><STRONG><a name="[216]"></a>nbr_table_remove</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nbr-table.o(i.nbr_table_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nbr_table_remove &rArr; nbr_set_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_set_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_rm
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm_routelist
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_rm
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_parent
</UL>

<P><STRONG><a name="[217]"></a>nbr_table_unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nbr-table.o(i.nbr_table_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nbr_table_unlock &rArr; nbr_set_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_set_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_preferred_parent
</UL>

<P><STRONG><a name="[218]"></a>nbr_table_update_lladdr</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, nbr-table.o(i.nbr_table_update_lladdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nbr_table_update_lladdr &rArr; remove_key &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_key
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_from_index
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_from_lladdr
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ns_input
</UL>

<P><STRONG><a name="[156]"></a>netstack_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, netstack.o(i.netstack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netstack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stack_6LoWPAN_Init
</UL>

<P><STRONG><a name="[153]"></a>node_id_restore</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, node-id.o(i.node_id_restore))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stack_6LoWPAN_Init
</UL>

<P><STRONG><a name="[16a]"></a>packetbuf_addr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, packetbuf.o(i.packetbuf_addr))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_verify_hbh_header
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_link_neighbor_callback
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uncompress_hdr_iphc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_fragment
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_icmp6_update_nbr_table
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_input
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_frame
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_hbh_header
</UL>

<P><STRONG><a name="[190]"></a>packetbuf_attr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, packetbuf.o(i.packetbuf_attr))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_stats_input_callback
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_sent
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_frame
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value
</UL>

<P><STRONG><a name="[225]"></a>packetbuf_attr_clear</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, packetbuf.o(i.packetbuf_attr_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = packetbuf_attr_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_copy
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_clear
</UL>

<P><STRONG><a name="[226]"></a>packetbuf_attr_copyfrom</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, packetbuf.o(i.packetbuf_attr_copyfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = packetbuf_attr_copyfrom &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_to_packetbuf
</UL>

<P><STRONG><a name="[227]"></a>packetbuf_attr_copyto</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, packetbuf.o(i.packetbuf_attr_copyto))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = packetbuf_attr_copyto &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_update_attr_from_packetbuf
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_new_from_packetbuf
</UL>

<P><STRONG><a name="[21a]"></a>packetbuf_clear</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, packetbuf.o(i.packetbuf_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = packetbuf_clear &rArr; packetbuf_attr_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_attr_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_copyfrom
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_spirit_radio_process
</UL>

<P><STRONG><a name="[228]"></a>packetbuf_copyfrom</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, packetbuf.o(i.packetbuf_copyfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = packetbuf_copyfrom &rArr; packetbuf_clear &rArr; packetbuf_attr_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_clear
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_to_packetbuf
</UL>

<P><STRONG><a name="[229]"></a>packetbuf_copyto</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, packetbuf.o(i.packetbuf_copyto))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = packetbuf_copyto &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_dataptr
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_new_from_packetbuf
</UL>

<P><STRONG><a name="[194]"></a>packetbuf_datalen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, packetbuf.o(i.packetbuf_datalen))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uncompress_hdr_iphc
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_fragment
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_frame
</UL>

<P><STRONG><a name="[193]"></a>packetbuf_dataptr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, packetbuf.o(i.packetbuf_dataptr))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_copyto
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_frame
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_spirit_radio_process
</UL>

<P><STRONG><a name="[196]"></a>packetbuf_hdralloc</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, packetbuf.o(i.packetbuf_hdralloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = packetbuf_hdralloc &rArr; packetbuf_totlen
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_totlen
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_frame
</UL>

<P><STRONG><a name="[22b]"></a>packetbuf_hdrlen</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, packetbuf.o(i.packetbuf_hdrlen))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_totlen
</UL>

<P><STRONG><a name="[197]"></a>packetbuf_hdrptr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, packetbuf.o(i.packetbuf_hdrptr))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_one_packet
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_frame
</UL>

<P><STRONG><a name="[22c]"></a>packetbuf_hdrreduce</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, packetbuf.o(i.packetbuf_hdrreduce))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse
</UL>

<P><STRONG><a name="[191]"></a>packetbuf_holds_broadcast</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, packetbuf.o(i.packetbuf_holds_broadcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = packetbuf_holds_broadcast &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_input
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_frame
</UL>

<P><STRONG><a name="[21b]"></a>packetbuf_set_addr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, packetbuf.o(i.packetbuf_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = packetbuf_set_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_one_packet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse
</UL>

<P><STRONG><a name="[192]"></a>packetbuf_set_attr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, packetbuf.o(i.packetbuf_set_attr))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_packet_attrs
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_frame
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_read
</UL>

<P><STRONG><a name="[21d]"></a>packetbuf_set_datalen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, packetbuf.o(i.packetbuf_set_datalen))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_spirit_radio_process
</UL>

<P><STRONG><a name="[22a]"></a>packetbuf_totlen</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, packetbuf.o(i.packetbuf_totlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = packetbuf_totlen
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_hdrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_hdralloc
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_one_packet
</UL>

<P><STRONG><a name="[230]"></a>process_alloc_event</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, process.o(i.process_alloc_event))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_unicast_sender_process
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_sensors_process
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_tcpip_process
</UL>

<P><STRONG><a name="[151]"></a>process_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, process.o(i.process_init))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stack_6LoWPAN_Init
</UL>

<P><STRONG><a name="[174]"></a>process_poll</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, process.o(i.process_poll))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit1_interrupt_callback
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_changed
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_request_poll
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_etimer_process
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_spirit_radio_process
</UL>

<P><STRONG><a name="[22f]"></a>process_post</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, process.o(i.process_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = process_post
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_sensors_process
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_etimer_process
</UL>

<P><STRONG><a name="[22e]"></a>process_post_synch</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, process.o(i.process_post_synch))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = process_post_synch &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_process
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_start
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_uipcall
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
</UL>

<P><STRONG><a name="[20d]"></a>process_run</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, process.o(i.process_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = process_run &rArr; do_event &rArr; do_poll &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_poll
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_event
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[152]"></a>process_start</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, process.o(i.process_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = process_start &rArr; process_post_synch &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post_synch
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_udp_register
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servreg_hack_init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stack_6LoWPAN_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autostart_start
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_init
</UL>

<P><STRONG><a name="[222]"></a>queuebuf_attr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, queuebuf.o(i.queuebuf_attr))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_sent
</UL>

<P><STRONG><a name="[1dd]"></a>queuebuf_free</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, queuebuf.o(i.queuebuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = queuebuf_free &rArr; memb_free
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_inmemb
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_free
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_packet
</UL>

<P><STRONG><a name="[158]"></a>queuebuf_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, queuebuf.o(i.queuebuf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = queuebuf_init &rArr; memb_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stack_6LoWPAN_Init
</UL>

<P><STRONG><a name="[21e]"></a>queuebuf_new_from_packetbuf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, queuebuf.o(i.queuebuf_new_from_packetbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = queuebuf_new_from_packetbuf &rArr; packetbuf_copyto &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_copyto
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_attr_copyto
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_free
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
</UL>

<P><STRONG><a name="[21c]"></a>queuebuf_numfree</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, queuebuf.o(i.queuebuf_numfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = queuebuf_numfree &rArr; memb_numfree
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_numfree
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output
</UL>

<P><STRONG><a name="[220]"></a>queuebuf_to_packetbuf</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, queuebuf.o(i.queuebuf_to_packetbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = queuebuf_to_packetbuf &rArr; packetbuf_copyfrom &rArr; packetbuf_clear &rArr; packetbuf_attr_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_copyfrom
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_attr_copyfrom
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_inmemb
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_list
</UL>

<P><STRONG><a name="[241]"></a>queuebuf_update_attr_from_packetbuf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, queuebuf.o(i.queuebuf_update_attr_from_packetbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = queuebuf_update_attr_from_packetbuf &rArr; packetbuf_attr_copyto &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_attr_copyto
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rexmit
</UL>

<P><STRONG><a name="[154]"></a>random_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, random.o(i.random_init))
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stack_6LoWPAN_Init
</UL>

<P><STRONG><a name="[18f]"></a>random_rand</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, random.o(i.random_rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = random_rand
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_servreg_hack_process
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_transmission
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_compute_reachable_time
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_reset_periodic_timer
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_frame
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_probing_target
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_probing_delay
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dao_lifetime_timer
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_dao
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_dio_interval
</UL>

<P><STRONG><a name="[244]"></a>remove_ext_hdr</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, uip6.o(i.remove_ext_hdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = remove_ext_hdr &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[136]"></a>round</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, round.o(i.round))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = round &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioGetFrequencyBase
</UL>

<P><STRONG><a name="[249]"></a>rpl_add_dag</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, rpl-dag.o(i.rpl_add_dag))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = rpl_add_dag &rArr; rpl_process_parent_event &rArr; rpl_local_repair &rArr; rpl_nullify_parent &rArr; dao_output &rArr; dao_output_target &rArr; dao_output_target_seq &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_parent
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_rank_via_parent
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_parent_event
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_move_parent
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_find_parent
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_find_of
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_alloc_dag
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_parent
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_preferred_parent
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_parent_dag
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_dio
</UL>

<P><STRONG><a name="[1e7]"></a>rpl_add_parent</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rpl-dag.o(i.rpl_add_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rpl_add_parent &rArr; nbr_table_add_lladdr &rArr; nbr_table_allocate &rArr; rpl_nbr_policy_find_removable &rArr; find_removable_dao &rArr; update_nbr &rArr; uip_ds6_route_is_nexthop &rArr; uip_ds6_nbr_lladdr_from_ipaddr &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_add_lladdr
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_lladdr_from_ipaddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_dio
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_join_instance
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_dag
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;global_repair
</UL>

<P><STRONG><a name="[1a9]"></a>rpl_add_route</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rpl.o(i.rpl_add_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rpl_add_route &rArr; uip_ds6_route_add &rArr; nbr_table_add_lladdr &rArr; nbr_table_allocate &rArr; rpl_nbr_policy_find_removable &rArr; find_removable_dao &rArr; update_nbr &rArr; uip_ds6_route_is_nexthop &rArr; uip_ds6_nbr_lladdr_from_ipaddr &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_input_storing
</UL>

<P><STRONG><a name="[24a]"></a>rpl_alloc_dag</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rpl-dag.o(i.rpl_alloc_dag))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rpl_alloc_dag &rArr; rpl_alloc_instance &rArr; rpl_schedule_probing &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_instance
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_alloc_instance
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_join_instance
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_dag
</UL>

<P><STRONG><a name="[250]"></a>rpl_alloc_instance</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rpl-dag.o(i.rpl_alloc_instance))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rpl_alloc_instance &rArr; rpl_schedule_probing &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_schedule_probing
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_alloc_dag
</UL>

<P><STRONG><a name="[251]"></a>rpl_dag_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rpl-dag.o(i.rpl_dag_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rpl_dag_init &rArr; nbr_table_register
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_register
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_init
</UL>

<P><STRONG><a name="[24c]"></a>rpl_find_of</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rpl-dag.o(i.rpl_find_of))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_join_instance
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_dag
</UL>

<P><STRONG><a name="[1a7]"></a>rpl_find_parent</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rpl-dag.o(i.rpl_find_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rpl_find_parent &rArr; find_parent_any_dag_any_instance &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_parent_any_dag_any_instance
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_dio
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_dag
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_input_storing
</UL>

<P><STRONG><a name="[252]"></a>rpl_find_parent_any_dag</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rpl-dag.o(i.rpl_find_parent_any_dag))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rpl_find_parent_any_dag &rArr; find_parent_any_dag_any_instance &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_parent_any_dag_any_instance
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_link_neighbor_callback
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_ipv6_neighbor_callback
</UL>

<P><STRONG><a name="[253]"></a>rpl_free_dag</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rpl-dag.o(i.rpl_free_dag))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = rpl_free_dag &rArr; remove_parents &rArr; rpl_remove_parent &rArr; rpl_nullify_parent &rArr; dao_output &rArr; dao_output_target &rArr; dao_output_target_seq &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_parents
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_prefix
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_routes
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_purge_dags
</UL>

<P><STRONG><a name="[1f1]"></a>rpl_get_any_dag</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rpl-dag.o(i.rpl_get_any_dag))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_periodic_timer
</UL>

<P><STRONG><a name="[255]"></a>rpl_get_dag</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rpl-dag.o(i.rpl_get_dag))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rpl_get_dag &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_update_header
</UL>

<P><STRONG><a name="[1a5]"></a>rpl_get_instance</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rpl-dag.o(i.rpl_get_instance))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_repair_root
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_verify_hbh_header
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_dio
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_alloc_dag
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_removable_dio
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_input_storing
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_input
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_hbh_header
</UL>

<P><STRONG><a name="[1b1]"></a>rpl_get_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rpl.o(i.rpl_get_mode))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dao_lifetime_timer
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_dao
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_output_target_seq
</UL>

<P><STRONG><a name="[256]"></a>rpl_get_parent</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rpl-dag.o(i.rpl_get_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rpl_get_parent &rArr; nbr_table_get_from_lladdr &rArr; index_from_lladdr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_get_from_lladdr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_nbr
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_hbh_header
</UL>

<P><STRONG><a name="[1aa]"></a>rpl_get_parent_ipaddr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rpl-dag.o(i.rpl_get_parent_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rpl_get_parent_ipaddr &rArr; rpl_get_parent_lladdr &rArr; nbr_table_get_lladdr &rArr; key_from_item
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_ipaddr_from_lladdr
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_parent_lladdr
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_select_dag
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_parent_event
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_move_parent
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_unicast_dio_timer
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probing_timer
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_output_target_seq
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_input_storing
</UL>

<P><STRONG><a name="[1e4]"></a>rpl_get_parent_link_stats</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rpl-dag.o(i.rpl_get_parent_link_stats))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rpl_get_parent_link_stats &rArr; link_stats_from_lladdr &rArr; nbr_table_get_from_lladdr &rArr; index_from_lladdr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_stats_from_lladdr
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_parent_lladdr
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_parent_is_fresh
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_probing_target
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probing_timer
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parent_link_metric
</UL>

<P><STRONG><a name="[257]"></a>rpl_get_parent_lladdr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rpl-dag.o(i.rpl_get_parent_lladdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rpl_get_parent_lladdr &rArr; nbr_table_get_lladdr &rArr; key_from_item
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_get_lladdr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_parent_link_stats
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_parent_ipaddr
</UL>

<P><STRONG><a name="[259]"></a>rpl_icmp6_register_handlers</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rpl-icmp6.o(i.rpl_icmp6_register_handlers))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rpl_icmp6_register_handlers &rArr; uip_icmp6_register_input_handler &rArr; list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_register_input_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_init
</UL>

<P><STRONG><a name="[172]"></a>rpl_icmp6_update_nbr_table</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, rpl-icmp6.o(i.rpl_icmp6_update_nbr_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rpl_icmp6_update_nbr_table &rArr; uip_ds6_nbr_add &rArr; nbr_table_add_lladdr &rArr; nbr_table_allocate &rArr; rpl_nbr_policy_find_removable &rArr; find_removable_dao &rArr; update_nbr &rArr; uip_ds6_route_is_nexthop &rArr; uip_ds6_nbr_lladdr_from_ipaddr &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_addr
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_lookup
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_add
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_nbr_from_dio
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_input
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_input_storing
</UL>

<P><STRONG><a name="[237]"></a>rpl_init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, rpl.o(i.rpl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rpl_init &rArr; rpl_reset_periodic_timer &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_maddr_add
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_reset_periodic_timer
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_icmp6_register_handlers
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_dag_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_tcpip_process
</UL>

<P><STRONG><a name="[25d]"></a>rpl_ipv6_neighbor_callback</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, rpl.o(i.rpl_ipv6_neighbor_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rpl_ipv6_neighbor_callback &rArr; rpl_find_parent_any_dag &rArr; find_parent_any_dag_any_instance &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_find_parent_any_dag
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_rm
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_add
</UL>

<P><STRONG><a name="[25e]"></a>rpl_join_instance</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, rpl-dag.o(i.rpl_join_instance))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rpl_join_instance &rArr; rpl_add_parent &rArr; nbr_table_add_lladdr &rArr; nbr_table_allocate &rArr; rpl_nbr_policy_find_removable &rArr; find_removable_dao &rArr; update_nbr &rArr; uip_ds6_route_is_nexthop &rArr; uip_ds6_nbr_lladdr_from_ipaddr &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_schedule_dao
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_reset_dio_timer
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_default_route
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_rank_via_parent
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_find_of
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_alloc_dag
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_parent
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_preferred_parent
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_prefix
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_dio
</UL>

<P><STRONG><a name="[261]"></a>rpl_link_neighbor_callback</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, rpl.o(i.rpl_link_neighbor_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rpl_link_neighbor_callback &rArr; rpl_find_parent_any_dag &rArr; find_parent_any_dag_any_instance &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_set_addr_iid
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_find_parent_any_dag
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_link_neighbor_callback
</UL>

<P><STRONG><a name="[262]"></a>rpl_local_repair</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, rpl-dag.o(i.rpl_local_repair))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = rpl_local_repair &rArr; rpl_nullify_parent &rArr; dao_output &rArr; dao_output_target &rArr; dao_output_target_seq &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_next
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_head
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_reset_dio_timer
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_nullify_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_parent_event
</UL>

<P><STRONG><a name="[24b]"></a>rpl_move_parent</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, rpl-dag.o(i.rpl_move_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rpl_move_parent &rArr; rpl_remove_routes_by_nexthop &rArr; uip_ds6_route_nexthop &rArr; nbr_table_get_lladdr &rArr; key_from_item
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_rm
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_parent_ipaddr
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_preferred_parent
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_routes_by_nexthop
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_dio
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_dag
</UL>

<P><STRONG><a name="[212]"></a>rpl_nbr_policy_find_removable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rpl-nbr-policy.o(i.rpl_nbr_policy_find_removable))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rpl_nbr_policy_find_removable &rArr; find_removable_dao &rArr; update_nbr &rArr; uip_ds6_route_is_nexthop &rArr; uip_ds6_nbr_lladdr_from_ipaddr &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_removable_dis
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_removable_dio
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_removable_dao
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_allocate
</UL>

<P><STRONG><a name="[263]"></a>rpl_nullify_parent</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rpl-dag.o(i.rpl_nullify_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = rpl_nullify_parent &rArr; dao_output &rArr; dao_output_target &rArr; dao_output_target_seq &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_rm
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_preferred_parent
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_output
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_parent
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_parent_event
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_local_repair
</UL>

<P><STRONG><a name="[17a]"></a>rpl_parent_is_fresh</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rpl-dag.o(i.rpl_parent_is_fresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rpl_parent_is_fresh &rArr; rpl_get_parent_link_stats &rArr; link_stats_from_lladdr &rArr; nbr_table_get_from_lladdr &rArr; index_from_lladdr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_stats_is_fresh
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_parent_link_stats
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_select_parent
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_parent_is_reachable
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;best_parent
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_probing_target
</UL>

<P><STRONG><a name="[266]"></a>rpl_parent_is_reachable</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rpl-dag.o(i.rpl_parent_is_reachable))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = rpl_parent_is_reachable &rArr; rpl_parent_is_fresh &rArr; rpl_get_parent_link_stats &rArr; link_stats_from_lladdr &rArr; nbr_table_get_from_lladdr &rArr; index_from_lladdr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_parent_is_fresh
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_parent_event
</UL>

<P><STRONG><a name="[1b4]"></a>rpl_process_dio</STRONG> (Thumb, 558 bytes, Stack size 32 bytes, rpl-dag.o(i.rpl_process_dio))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rpl_process_dio &rArr; rpl_add_dag &rArr; rpl_process_parent_event &rArr; rpl_local_repair &rArr; rpl_nullify_parent &rArr; dao_output &rArr; dao_output_target &rArr; dao_output_target_seq &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_add
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_schedule_dao
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_reset_dio_timer
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_prefix
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_parent_event
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_move_parent
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_join_instance
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_instance
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_find_parent
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_parent
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_dag
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lollipop_greater_than
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;global_repair
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_parent_dag
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_nbr_from_dio
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dio_input
</UL>

<P><STRONG><a name="[1e8]"></a>rpl_process_parent_event</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, rpl-dag.o(i.rpl_process_parent_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = rpl_process_parent_event &rArr; rpl_local_repair &rArr; rpl_nullify_parent &rArr; dao_output &rArr; dao_output_target &rArr; dao_output_target_seq &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_is_nexthop
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_select_dag
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_parent_is_reachable
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_nullify_parent
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_local_repair
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_parent_ipaddr
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acceptable_rank
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_routes_by_nexthop
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_recalculate_ranks
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_dio
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_dag
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;global_repair
</UL>

<P><STRONG><a name="[1f2]"></a>rpl_purge_dags</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rpl.o(i.rpl_purge_dags))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = rpl_purge_dags &rArr; rpl_free_dag &rArr; remove_parents &rArr; rpl_remove_parent &rArr; rpl_nullify_parent &rArr; dao_output &rArr; dao_output_target &rArr; dao_output_target_seq &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_free_dag
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_periodic_timer
</UL>

<P><STRONG><a name="[1f3]"></a>rpl_purge_routes</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, rpl.o(i.rpl_purge_routes))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = rpl_purge_routes &rArr; dao_output_target &rArr; dao_output_target_seq &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_rm
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_next
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_head
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_output_target
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_periodic_timer
</UL>

<P><STRONG><a name="[1e3]"></a>rpl_rank_via_parent</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rpl-dag.o(i.rpl_rank_via_parent))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_select_parent
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_select_dag
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_join_instance
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_dag
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;global_repair
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_probing_target
</UL>

<P><STRONG><a name="[1f4]"></a>rpl_recalculate_ranks</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rpl-dag.o(i.rpl_recalculate_ranks))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = rpl_recalculate_ranks &rArr; rpl_process_parent_event &rArr; rpl_local_repair &rArr; rpl_nullify_parent &rArr; dao_output &rArr; dao_output_target &rArr; dao_output_target_seq &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_next
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_head
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_parent_event
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_periodic_timer
</UL>

<P><STRONG><a name="[26f]"></a>rpl_remove_header</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, rpl-ext-header.o(i.rpl_remove_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rpl_remove_header &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_update_header
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_error_output
</UL>

<P><STRONG><a name="[20e]"></a>rpl_remove_parent</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rpl-dag.o(i.rpl_remove_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = rpl_remove_parent &rArr; rpl_nullify_parent &rArr; dao_output &rArr; dao_output_target &rArr; dao_output_target_seq &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_remove
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_nullify_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_dag
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_parents
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_callback
</UL>

<P><STRONG><a name="[254]"></a>rpl_remove_routes</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rpl.o(i.rpl_remove_routes))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rpl_remove_routes &rArr; uip_ds6_route_rm &rArr; uip_debug_ipaddr_print &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_rm
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_next
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_head
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_select_dag
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_free_dag
</UL>

<P><STRONG><a name="[265]"></a>rpl_remove_routes_by_nexthop</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, rpl.o(i.rpl_remove_routes_by_nexthop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rpl_remove_routes_by_nexthop &rArr; uip_ds6_route_nexthop &rArr; nbr_table_get_lladdr &rArr; key_from_item
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_nexthop
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_next
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_head
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_parent_event
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_move_parent
</UL>

<P><STRONG><a name="[270]"></a>rpl_repair_root</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rpl-dag.o(i.rpl_repair_root))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_reset_dio_timer
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_instance
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_ipv6_output
</UL>

<P><STRONG><a name="[1b8]"></a>rpl_reset_dio_timer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rpl-timers.o(i.rpl_reset_dio_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_dio_interval
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_repair_root
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_verify_hbh_header
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_select_dag
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_dio
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_local_repair
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_join_instance
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_input
</UL>

<P><STRONG><a name="[25b]"></a>rpl_reset_periodic_timer</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rpl-timers.o(i.rpl_reset_periodic_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rpl_reset_periodic_timer &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_rand
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_init
</UL>

<P><STRONG><a name="[260]"></a>rpl_schedule_dao</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rpl-timers.o(i.rpl_schedule_dao))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rpl_schedule_dao &rArr; schedule_dao &rArr; set_dao_lifetime_timer &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_dao
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_select_dag
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_dio
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_join_instance
</UL>

<P><STRONG><a name="[1f5]"></a>rpl_schedule_probing</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rpl-timers.o(i.rpl_schedule_probing))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rpl_schedule_probing &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_set
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_probing_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_select_parent
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_alloc_instance
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probing_timer
</UL>

<P><STRONG><a name="[272]"></a>rpl_schedule_unicast_dio_immediately</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rpl-timers.o(i.rpl_schedule_unicast_dio_immediately))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rpl_schedule_unicast_dio_immediately &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_verify_hbh_header
</UL>

<P><STRONG><a name="[26c]"></a>rpl_select_dag</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, rpl-dag.o(i.rpl_select_dag))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = rpl_select_dag &rArr; dao_output &rArr; dao_output_target &rArr; dao_output_target_seq &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_schedule_dao
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_reset_dio_timer
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_default_route
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_select_parent
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_rank_via_parent
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_parent_ipaddr
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_preferred_parent
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_prefix
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acceptable_rank
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_output
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_routes
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_parent_event
</UL>

<P><STRONG><a name="[273]"></a>rpl_select_parent</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, rpl-dag.o(i.rpl_select_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = rpl_select_parent &rArr; best_parent &rArr; rpl_parent_is_fresh &rArr; rpl_get_parent_link_stats &rArr; link_stats_from_lladdr &rArr; nbr_table_get_from_lladdr &rArr; index_from_lladdr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_schedule_probing
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_rank_via_parent
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_parent_is_fresh
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_preferred_parent
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;best_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_select_dag
</UL>

<P><STRONG><a name="[25f]"></a>rpl_set_default_route</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rpl-dag.o(i.rpl_set_default_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rpl_set_default_route &rArr; uip_ds6_defrt_add &rArr; uip_ds6_defrt_lookup &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_rm
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_add
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_select_dag
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_join_instance
</UL>

<P><STRONG><a name="[268]"></a>rpl_set_prefix</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, rpl-dag.o(i.rpl_set_prefix))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = rpl_set_prefix &rArr; check_prefix &rArr; uip_ds6_addr_add &rArr; uip_ds6_maddr_add &rArr; uip_ds6_list_loop &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_prefix
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_dio
</UL>

<P><STRONG><a name="[274]"></a>rpl_update_header</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, rpl-ext-header.o(i.rpl_update_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = rpl_update_header &rArr; insert_hbh_header &rArr; update_hbh_header &rArr; dao_output_target &rArr; dao_output_target_seq &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_addr_lookup
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_header
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_dag
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_hbh_header
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_hbh_header
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_ipv6_output
</UL>

<P><STRONG><a name="[1c9]"></a>rpl_verify_hbh_header</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, rpl-ext-header.o(i.rpl_verify_hbh_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rpl_verify_hbh_header &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_addr
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_get_from_lladdr
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_rm
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_lookup
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_reset_dio_timer
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_instance
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_schedule_unicast_dio_immediately
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_hdr_options_process
</UL>

<P><STRONG><a name="[275]"></a>rtimer_arch_init</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, rtimer-arch.o(i.rtimer_arch_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rtimer_arch_init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_init
</UL>

<P><STRONG><a name="[235]"></a>rtimer_arch_now</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtimer-arch.o(i.rtimer_arch_now))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_transmit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_read
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_on
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_off
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_channel_clear
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_spirit_radio_process
</UL>

<P><STRONG><a name="[14f]"></a>rtimer_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtimer.o(i.rtimer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rtimer_init &rArr; rtimer_arch_init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stack_6LoWPAN_Init
</UL>

<P><STRONG><a name="[cf]"></a>sensors_changed</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sensors.o(i.sensors_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sensors_changed &rArr; get_sensor_index
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_poll
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensor_index
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[238]"></a>servreg_hack_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, servreg-hack.o(i.servreg_hack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = servreg_hack_init &rArr; process_start &rArr; process_post_synch &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_start
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servreg_hack_lookup
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_unicast_sender_process
</UL>

<P><STRONG><a name="[1ed]"></a>servreg_hack_list_head</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, servreg-hack.o(i.servreg_hack_list_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = servreg_hack_list_head &rArr; purge_registrations &rArr; memb_free
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;purge_registrations
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servreg_hack_lookup
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_udp_packet
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_incoming_reg
</UL>

<P><STRONG><a name="[23b]"></a>servreg_hack_lookup</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, servreg-hack.o(i.servreg_hack_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = servreg_hack_lookup &rArr; servreg_hack_init &rArr; process_start &rArr; process_post_synch &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servreg_hack_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servreg_hack_list_head
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;purge_registrations
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_unicast_sender_process
</UL>

<P><STRONG><a name="[6e]"></a>sicslowpan_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sicslowpan.o(i.sicslowpan_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sicslowpan_init
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_set_outputfunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sicslowpan.o(.constdata)
</UL>
<P><STRONG><a name="[23a]"></a>simple_udp_register</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, simple-udp.o(i.simple_udp_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = simple_udp_register &rArr; process_start &rArr; process_post_synch &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_start
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_unicast_sender_process
</UL>

<P><STRONG><a name="[23d]"></a>simple_udp_sendto</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, simple-udp.o(i.simple_udp_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = simple_udp_sendto &rArr; uip_udp_packet_sendto &rArr; uip_udp_packet_send &rArr; tcpip_ipv6_output &rArr; rpl_update_header &rArr; insert_hbh_header &rArr; update_hbh_header &rArr; dao_output_target &rArr; dao_output_target_seq &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udp_packet_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_unicast_sender_process
</UL>

<P><STRONG><a name="[234]"></a>spirit1_arch_refresh_status</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, spirit1-arch.o(i.spirit1_arch_refresh_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = spirit1_arch_refresh_status &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGpioInterruptCmd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_set_ready_state
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_transmit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_read
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_on
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_off
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_channel_clear
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_spirit_radio_process
</UL>

<P><STRONG><a name="[c6]"></a>spirit1_interrupt_callback</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, spirit1.o(i.spirit1_interrupt_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = spirit1_interrupt_callback &rArr; SpiritPktBasicGetReceivedPktLength &rArr; SpiritPktCommonGetControlLength &rArr; RadioSpiReadRegisters &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritPktBasicGetReceivedPktLength
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritLinearFifoReadNumElementsRxFifo
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritIrqGetStatus
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritIrqClearStatus
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritCmdStrobeCommand
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritQiGetRssi
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritQiGetLqi
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiReadFifo
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_poll
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_spirit_radio_process
</UL>

<P><STRONG><a name="[281]"></a>spirit_set_ready_state</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, spirit1.o(i.spirit_set_ready_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = spirit_set_ready_state &rArr; SpiritIrqClearStatus &rArr; RadioSpiReadRegisters &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritIrqClearStatus
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritCmdStrobeCommand
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGpioInterruptCmd
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit1_arch_refresh_status
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_transmit
</UL>

<P><STRONG><a name="[283]"></a>stimer_expired</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stimer.o(i.stimer_expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stimer_expired
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_seconds
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_periodic
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_periodic
</UL>

<P><STRONG><a name="[285]"></a>stimer_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stimer.o(i.stimer_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stimer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_seconds
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_addr_add
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_add
</UL>

<P><STRONG><a name="[1fc]"></a>tcpip_input</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tcpip.o(i.tcpip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tcpip_input &rArr; process_post_synch &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post_synch
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input
</UL>

<P><STRONG><a name="[1c4]"></a>tcpip_ipv6_output</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, tcpip.o(i.tcpip_ipv6_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = tcpip_ipv6_output &rArr; rpl_update_header &rArr; insert_hbh_header &rArr; update_hbh_header &rArr; dao_output_target &rArr; dao_output_target_seq &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_rm
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_nexthop
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_lookup
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_lookup
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_get_ll
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_is_addr_onlink
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_choose
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_update_header
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_repair_root
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_output
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udp_packet_send
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventhandler
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_send
</UL>

<P><STRONG><a name="[288]"></a>tcpip_output</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tcpip.o(i.tcpip_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcpip_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_ipv6_output
</UL>

<P><STRONG><a name="[27e]"></a>tcpip_set_outputfunc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcpip.o(i.tcpip_set_outputfunc))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicslowpan_init
</UL>

<P><STRONG><a name="[289]"></a>tcpip_uipcall</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, tcpip.o(i.tcpip_uipcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tcpip_uipcall &rArr; process_post_synch &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post_synch
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_periodic_tcp_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[16d]"></a>timer_expired</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timer.o(i.timer_expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_expired
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;purge_registrations
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_fragment
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_etimer_process
</UL>

<P><STRONG><a name="[1bf]"></a>timer_reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(i.timer_reset))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_reset
</UL>

<P><STRONG><a name="[1c0]"></a>timer_restart</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, timer.o(i.timer_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_restart
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_restart
</UL>

<P><STRONG><a name="[170]"></a>timer_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, timer.o(i.timer_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;purge_registrations
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_incoming_reg
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_fragment
</UL>

<P><STRONG><a name="[1d7]"></a>uart_send_char</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, console.o(i.uart_send_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uart_send_char &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[231]"></a>udp_broadcast_new</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tcpip.o(i.udp_broadcast_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = udp_broadcast_new &rArr; udp_new &rArr; uip_udp_new &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_servreg_hack_process
</UL>

<P><STRONG><a name="[232]"></a>udp_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tcpip.o(i.udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = udp_new &rArr; uip_udp_new &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udp_new
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_udp_register
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_broadcast_new
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_servreg_hack_process
</UL>

<P><STRONG><a name="[28c]"></a>uip_add32</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, uip6.o(i.uip_add32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uip_add32
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add_rcv_nxt
</UL>

<P><STRONG><a name="[27d]"></a>uip_debug_ipaddr_print</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, uip-debug.o(i.uip_debug_ipaddr_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uip_debug_ipaddr_print &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_global_address
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_rm
</UL>

<P><STRONG><a name="[15a]"></a>uip_ds6_addr_add</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, uip-ds6.o(i.uip_ds6_addr_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = uip_ds6_addr_add &rArr; uip_ds6_maddr_add &rArr; uip_ds6_list_loop &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_maddr_add
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stimer_set
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_list_loop
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_global_address
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stack_6LoWPAN_Init
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_prefix
</UL>

<P><STRONG><a name="[185]"></a>uip_ds6_addr_lookup</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, uip-ds6.o(i.uip_ds6_addr_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = uip_ds6_addr_lookup &rArr; uip_ds6_list_loop &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_list_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_update_header
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ns_input
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_prefix
</UL>

<P><STRONG><a name="[186]"></a>uip_ds6_addr_rm</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uip-ds6.o(i.uip_ds6_addr_rm))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = uip_ds6_addr_rm &rArr; uip_ds6_maddr_lookup &rArr; uip_ds6_list_loop &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_maddr_lookup
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_maddr_rm
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_periodic
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_prefix
</UL>

<P><STRONG><a name="[290]"></a>uip_ds6_compute_reachable_time</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uip-ds6.o(i.uip_ds6_compute_reachable_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uip_ds6_compute_reachable_time &rArr; random_rand
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_rand
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_init
</UL>

<P><STRONG><a name="[269]"></a>uip_ds6_defrt_add</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, uip-ds6-route.o(i.uip_ds6_defrt_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uip_ds6_defrt_add &rArr; uip_ds6_defrt_lookup &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_alloc
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_push
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_lookup
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_route_callback
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stimer_set
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_default_route
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_dio
</UL>

<P><STRONG><a name="[287]"></a>uip_ds6_defrt_choose</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, uip-ds6-route.o(i.uip_ds6_defrt_choose))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = uip_ds6_defrt_choose &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_ipv6_output
</UL>

<P><STRONG><a name="[291]"></a>uip_ds6_defrt_lookup</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, uip-ds6-route.o(i.uip_ds6_defrt_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = uip_ds6_defrt_lookup &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_add
</UL>

<P><STRONG><a name="[292]"></a>uip_ds6_defrt_periodic</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, uip-ds6-route.o(i.uip_ds6_defrt_periodic))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uip_ds6_defrt_periodic &rArr; uip_ds6_defrt_rm &rArr; call_route_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_rm
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stimer_expired
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_periodic
</UL>

<P><STRONG><a name="[264]"></a>uip_ds6_defrt_rm</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, uip-ds6-route.o(i.uip_ds6_defrt_rm))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uip_ds6_defrt_rm &rArr; call_route_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_free
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_route_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_periodic
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_default_route
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_nullify_parent
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_move_parent
</UL>

<P><STRONG><a name="[1e9]"></a>uip_ds6_get_link_local</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, uip-ds6.o(i.uip_ds6_get_link_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uip_ds6_get_link_local
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_select_src
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dio_timer
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dao_timer
</UL>

<P><STRONG><a name="[293]"></a>uip_ds6_init</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, uip-ds6.o(i.uip_ds6_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = uip_ds6_init &rArr; uip_ds6_addr_add &rArr; uip_ds6_maddr_add &rArr; uip_ds6_list_loop &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_set_addr_iid
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_addr_add
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_maddr_add
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_init
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_neighbors_init
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_prefix_add
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_compute_reachable_time
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_init
</UL>

<P><STRONG><a name="[286]"></a>uip_ds6_is_addr_onlink</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, uip-ds6.o(i.uip_ds6_is_addr_onlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = uip_ds6_is_addr_onlink &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_ipv6_output
</UL>

<P><STRONG><a name="[221]"></a>uip_ds6_link_neighbor_callback</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, uip-ds6-nbr.o(i.uip_ds6_link_neighbor_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = uip_ds6_link_neighbor_callback &rArr; link_stats_packet_sent &rArr; nbr_table_add_lladdr &rArr; nbr_table_allocate &rArr; rpl_nbr_policy_find_removable &rArr; find_removable_dao &rArr; update_nbr &rArr; uip_ds6_route_is_nexthop &rArr; uip_ds6_nbr_lladdr_from_ipaddr &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_addr
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_cmp
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_stats_packet_sent
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_link_neighbor_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_sent
</UL>

<P><STRONG><a name="[28d]"></a>uip_ds6_list_loop</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, uip-ds6.o(i.uip_ds6_list_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uip_ds6_list_loop &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_addr_add
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_maddr_add
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_addr_lookup
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_maddr_lookup
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_prefix_add
</UL>

<P><STRONG><a name="[25c]"></a>uip_ds6_maddr_add</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, uip-ds6.o(i.uip_ds6_maddr_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = uip_ds6_maddr_add &rArr; uip_ds6_list_loop &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_list_loop
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_addr_add
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_init
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_init
</UL>

<P><STRONG><a name="[28e]"></a>uip_ds6_maddr_lookup</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, uip-ds6.o(i.uip_ds6_maddr_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = uip_ds6_maddr_lookup &rArr; uip_ds6_list_loop &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_list_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_addr_rm
</UL>

<P><STRONG><a name="[28f]"></a>uip_ds6_maddr_rm</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uip-ds6.o(i.uip_ds6_maddr_rm))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_addr_rm
</UL>

<P><STRONG><a name="[219]"></a>uip_ds6_nbr_add</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, uip-ds6-nbr.o(i.uip_ds6_nbr_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = uip_ds6_nbr_add &rArr; nbr_table_add_lladdr &rArr; nbr_table_allocate &rArr; rpl_nbr_policy_find_removable &rArr; find_removable_dao &rArr; update_nbr &rArr; uip_ds6_route_is_nexthop &rArr; uip_ds6_nbr_lladdr_from_ipaddr &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_add_lladdr
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_ipv6_neighbor_callback
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ns_input
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_icmp6_update_nbr_table
</UL>

<P><STRONG><a name="[1d0]"></a>uip_ds6_nbr_get_ll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uip-ds6-nbr.o(i.uip_ds6_nbr_get_ll))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uip_ds6_nbr_get_ll &rArr; nbr_table_get_lladdr &rArr; key_from_item
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_get_lladdr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_ipv6_output
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ns_input
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_lladdr_from_ipaddr
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_parent_any_dag_any_instance
</UL>

<P><STRONG><a name="[258]"></a>uip_ds6_nbr_ipaddr_from_lladdr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uip-ds6-nbr.o(i.uip_ds6_nbr_ipaddr_from_lladdr))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_nexthop
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_parent_ipaddr
</UL>

<P><STRONG><a name="[297]"></a>uip_ds6_nbr_ll_lookup</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uip-ds6-nbr.o(i.uip_ds6_nbr_ll_lookup), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_get_from_lladdr
</UL>

<P><STRONG><a name="[24e]"></a>uip_ds6_nbr_lladdr_from_ipaddr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uip-ds6-nbr.o(i.uip_ds6_nbr_lladdr_from_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uip_ds6_nbr_lladdr_from_ipaddr &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_lookup
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_get_ll
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_is_nexthop
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_add
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_parent
</UL>

<P><STRONG><a name="[1cf]"></a>uip_ds6_nbr_lookup</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, uip-ds6-nbr.o(i.uip_ds6_nbr_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_next
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_head
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_choose
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_ipv6_output
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ns_input
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_lladdr_from_ipaddr
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_icmp6_update_nbr_table
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_parent_any_dag_any_instance
</UL>

<P><STRONG><a name="[6b]"></a>uip_ds6_nbr_rm</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uip-ds6-nbr.o(i.uip_ds6_nbr_rm))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = uip_ds6_nbr_rm &rArr; rpl_ipv6_neighbor_callback &rArr; rpl_find_parent_any_dag &rArr; find_parent_any_dag_any_instance &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_remove
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_ipv6_neighbor_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uip-ds6-nbr.o(i.uip_ds6_neighbors_init)
</UL>
<P><STRONG><a name="[294]"></a>uip_ds6_neighbors_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uip-ds6-nbr.o(i.uip_ds6_neighbors_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uip_ds6_neighbors_init &rArr; link_stats_init &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_register
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_stats_init
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_init
</UL>

<P><STRONG><a name="[1c5]"></a>uip_ds6_periodic</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uip-ds6.o(i.uip_ds6_periodic))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = uip_ds6_periodic &rArr; uip_ds6_addr_rm &rArr; uip_ds6_maddr_lookup &rArr; uip_ds6_list_loop &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_reset
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_periodic
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stimer_expired
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_addr_rm
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventhandler
</UL>

<P><STRONG><a name="[296]"></a>uip_ds6_prefix_add</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, uip-ds6.o(i.uip_ds6_prefix_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = uip_ds6_prefix_add &rArr; uip_ds6_list_loop &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_list_loop
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_init
</UL>

<P><STRONG><a name="[24f]"></a>uip_ds6_route_add</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, uip-ds6-route.o(i.uip_ds6_route_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = uip_ds6_route_add &rArr; nbr_table_add_lladdr &rArr; nbr_table_allocate &rArr; rpl_nbr_policy_find_removable &rArr; find_removable_dao &rArr; update_nbr &rArr; uip_ds6_route_is_nexthop &rArr; uip_ds6_nbr_lladdr_from_ipaddr &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_lock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_get_from_lladdr
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_add_lladdr
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_free
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_alloc
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_push
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_rm
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_nexthop
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_lookup
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_route_callback
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_lladdr_from_ipaddr
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_route
</UL>

<P><STRONG><a name="[26d]"></a>uip_ds6_route_head</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uip-ds6-route.o(i.uip_ds6_route_head))
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_lookup
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_routes_by_nexthop
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_routes
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_purge_routes
</UL>

<P><STRONG><a name="[295]"></a>uip_ds6_route_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, uip-ds6-route.o(i.uip_ds6_route_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uip_ds6_route_init &rArr; nbr_table_register
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_register
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_init
</UL>

<P><STRONG><a name="[26a]"></a>uip_ds6_route_is_nexthop</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uip-ds6-route.o(i.uip_ds6_route_is_nexthop))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = uip_ds6_route_is_nexthop &rArr; uip_ds6_nbr_lladdr_from_ipaddr &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_get_from_lladdr
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_lladdr_from_ipaddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_parent_event
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_nbr
</UL>

<P><STRONG><a name="[1a8]"></a>uip_ds6_route_lookup</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, uip-ds6-route.o(i.uip_ds6_route_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = uip_ds6_route_lookup &rArr; list_push
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_push
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_next
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_head
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_ipv6_output
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_verify_hbh_header
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_add
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_input_storing
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_hbh_header
</UL>

<P><STRONG><a name="[26e]"></a>uip_ds6_route_next</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uip-ds6-route.o(i.uip_ds6_route_next))
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_lookup
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_routes_by_nexthop
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_routes
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_purge_routes
</UL>

<P><STRONG><a name="[1ab]"></a>uip_ds6_route_nexthop</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uip-ds6-route.o(i.uip_ds6_route_nexthop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uip_ds6_route_nexthop &rArr; nbr_table_get_lladdr &rArr; key_from_item
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_get_lladdr
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_ipaddr_from_lladdr
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_rm
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_ipv6_output
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_add
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_routes_by_nexthop
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_input_storing
</UL>

<P><STRONG><a name="[246]"></a>uip_ds6_route_rm</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, uip-ds6-route.o(i.uip_ds6_route_rm))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = uip_ds6_route_rm &rArr; uip_debug_ipaddr_print &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_debug_ipaddr_print
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_remove
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_free
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_nexthop
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_route_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_ipv6_output
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_verify_hbh_header
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_add
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm_routelist
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_routes
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_purge_routes
</UL>

<P><STRONG><a name="[1be]"></a>uip_ds6_select_src</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, uip-ds6.o(i.uip_ds6_select_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uip_ds6_select_src &rArr; get_match_length
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_get_link_local
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_match_length
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_error_output
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_send
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_request_input
</UL>

<P><STRONG><a name="[159]"></a>uip_ds6_set_addr_iid</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uip-ds6.o(i.uip_ds6_set_addr_iid))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_global_address
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stack_6LoWPAN_Init
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_init
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uncompress_addr
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_link_neighbor_callback
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ip_from_prefix
</UL>

<P><STRONG><a name="[299]"></a>uip_htonl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uip6.o(i.uip_htonl))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_error_output
</UL>

<P><STRONG><a name="[1ca]"></a>uip_icmp6_error_output</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, uip-icmp6.o(i.uip_icmp6_error_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = uip_icmp6_error_output &rArr; uip_ds6_select_src &rArr; get_match_length
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_select_src
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6chksum
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_htonl
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_header
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_hdr_options_process
</UL>

<P><STRONG><a name="[29a]"></a>uip_icmp6_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uip-icmp6.o(i.uip_icmp6_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = uip_icmp6_init &rArr; uip_icmp6_register_input_handler &rArr; list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_register_input_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_init
</UL>

<P><STRONG><a name="[29b]"></a>uip_icmp6_input</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, uip-icmp6.o(i.uip_icmp6_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uip_icmp6_input
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[25a]"></a>uip_icmp6_register_input_handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uip-icmp6.o(i.uip_icmp6_register_input_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uip_icmp6_register_input_handler &rArr; list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_nd6_init
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_init
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_icmp6_register_handlers
</UL>

<P><STRONG><a name="[1ad]"></a>uip_icmp6_send</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, uip-icmp6.o(i.uip_icmp6_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + In Cycle
<LI>Call Chain = uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_ipv6_output
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_select_src
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6chksum
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dio_output
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_output_target_seq
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_input_storing
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_output
</UL>

<P><STRONG><a name="[1bd]"></a>uip_icmp6chksum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uip6.o(i.uip_icmp6chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uip_icmp6chksum &rArr; upper_layer_chksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_error_output
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ns_input
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_send
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_request_input
</UL>

<P><STRONG><a name="[236]"></a>uip_init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, uip6.o(i.uip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = uip_init &rArr; uip_ds6_init &rArr; uip_ds6_addr_add &rArr; uip_ds6_maddr_add &rArr; uip_ds6_list_loop &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_nd6_init
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_init
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_tcpip_process
</UL>

<P><STRONG><a name="[29d]"></a>uip_nd6_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uip-nd6.o(i.uip_nd6_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uip_nd6_init &rArr; uip_icmp6_register_input_handler &rArr; list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_register_input_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_init
</UL>

<P><STRONG><a name="[1c2]"></a>uip_process</STRONG> (Thumb, 3000 bytes, Stack size 48 bytes, uip6.o(i.uip_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = uip_process &rArr; ext_hdr_options_process &rArr; rpl_verify_hbh_header &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_is_addr_onlink
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_uipcall
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_addr_lookup
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_input
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_error_output
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_select_src
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_maddr_lookup
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udpchksum
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6chksum
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_ext_hdr
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add_rcv_nxt
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_hdr_options_process
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_tcpchksum
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add32
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udp_packet_send
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventhandler
</UL>

<P><STRONG><a name="[29f]"></a>uip_tcpchksum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uip6.o(i.uip_tcpchksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uip_tcpchksum &rArr; upper_layer_chksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[28a]"></a>uip_udp_new</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, uip6.o(i.uip_udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uip_udp_new &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
</UL>

<P><STRONG><a name="[27b]"></a>uip_udp_packet_send</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, uip-udp-packet.o(i.uip_udp_packet_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = uip_udp_packet_send &rArr; tcpip_ipv6_output &rArr; rpl_update_header &rArr; insert_hbh_header &rArr; update_hbh_header &rArr; dao_output_target &rArr; dao_output_target_seq &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_ipv6_output
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_udp_packet
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udp_packet_sendto
</UL>

<P><STRONG><a name="[27f]"></a>uip_udp_packet_sendto</STRONG> (Thumb, 62 bytes, Stack size 56 bytes, uip-udp-packet.o(i.uip_udp_packet_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = uip_udp_packet_sendto &rArr; uip_udp_packet_send &rArr; tcpip_ipv6_output &rArr; rpl_update_header &rArr; insert_hbh_header &rArr; update_hbh_header &rArr; dao_output_target &rArr; dao_output_target_seq &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udp_packet_send
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_udp_sendto
</UL>

<P><STRONG><a name="[29e]"></a>uip_udpchksum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uip6.o(i.uip_udpchksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uip_udpchksum &rArr; upper_layer_chksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[1c6]"></a>uip_unlisten</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, uip6.o(i.uip_unlisten))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventhandler
</UL>

<P><STRONG><a name="[150]"></a>watchdog_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, watchdog.o(i.watchdog_init))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stack_6LoWPAN_Init
</UL>

<P><STRONG><a name="[27a]"></a>watchdog_periodic</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, watchdog.o(i.watchdog_periodic))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
</UL>

<P><STRONG><a name="[15d]"></a>watchdog_start</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, watchdog.o(i.watchdog_start))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stack_6LoWPAN_Init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[10e]"></a>SPI_Write</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, radio_spi.o(i.SPI_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SPI_Write &rArr; RadioSpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiInit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiWriteRegisters
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiWriteFifo
</UL>

<P><STRONG><a name="[5b]"></a>ADC_DMAConvCplt</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32l1xx_hal_adc.o(i.ADC_DMAConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[5d]"></a>ADC_DMAError</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32l1xx_hal_adc.o(i.ADC_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[5c]"></a>ADC_DMAHalfConvCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l1xx_hal_adc.o(i.ADC_DMAHalfConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAHalfConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[d5]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l1xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[ce]"></a>DMA_SetConfig</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, stm32l1xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[da]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32l1xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[e8]"></a>SPI_WaitOnFlagUntilTimeout</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, stm32l1xx_hal_spi.o(i.SPI_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[ec]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, stm32l1xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[ee]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l1xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[f1]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[f3]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32l1xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[f4]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, stm32l1xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[f5]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, stm32l1xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[f6]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, stm32l1xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[ef]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32l1xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[f0]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32l1xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[fb]"></a>UART_SetConfig</STRONG> (Thumb, 666 bytes, Stack size 24 bytes, stm32l1xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[fd]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, stm32l1xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[0]"></a>process_thread_unicast_sender_process</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, unicast-sender.o(i.process_thread_unicast_sender_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = process_thread_unicast_sender_process &rArr; simple_udp_sendto &rArr; uip_udp_packet_sendto &rArr; uip_udp_packet_send &rArr; tcpip_ipv6_output &rArr; rpl_update_header &rArr; insert_hbh_header &rArr; update_hbh_header &rArr; dao_output_target &rArr; dao_output_target_seq &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_udp_sendto
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_udp_register
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servreg_hack_lookup
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servreg_hack_init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_alloc_event
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_reset
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_expired
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_global_address
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> unicast-sender.o(.data)
</UL>
<P><STRONG><a name="[62]"></a>receiver</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, unicast-sender.o(i.receiver))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = receiver &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> unicast-sender.o(i.process_thread_unicast_sender_process)
</UL>
<P><STRONG><a name="[239]"></a>set_global_address</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, unicast-sender.o(i.set_global_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_global_address &rArr; uip_ds6_addr_add &rArr; uip_ds6_maddr_add &rArr; uip_ds6_list_loop &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_set_addr_iid
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_addr_add
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_debug_ipaddr_print
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_unicast_sender_process
</UL>

<P><STRONG><a name="[1ec]"></a>handle_incoming_reg</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, servreg-hack.o(i.handle_incoming_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = handle_incoming_reg &rArr; servreg_hack_list_head &rArr; purge_registrations &rArr; memb_free
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_alloc
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_push
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servreg_hack_list_head
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_servreg_hack_process
</UL>

<P><STRONG><a name="[1]"></a>process_thread_servreg_hack_process</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, servreg-hack.o(i.process_thread_servreg_hack_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = process_thread_servreg_hack_process &rArr; send_udp_packet &rArr; uip_udp_packet_send &rArr; tcpip_ipv6_output &rArr; rpl_update_header &rArr; insert_hbh_header &rArr; update_hbh_header &rArr; dao_output_target &rArr; dao_output_target_seq &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_reset
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_broadcast_new
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_rand
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_udp_packet
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_incoming_reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> servreg-hack.o(.data)
</UL>
<P><STRONG><a name="[23e]"></a>purge_registrations</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, servreg-hack.o(i.purge_registrations))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = purge_registrations &rArr; memb_free
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expired
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_free
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servreg_hack_lookup
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servreg_hack_list_head
</UL>

<P><STRONG><a name="[233]"></a>send_udp_packet</STRONG> (Thumb, 174 bytes, Stack size 120 bytes, servreg-hack.o(i.send_udp_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = send_udp_packet &rArr; uip_udp_packet_send &rArr; tcpip_ipv6_output &rArr; rpl_update_header &rArr; insert_hbh_header &rArr; update_hbh_header &rArr; dao_output_target &rArr; dao_output_target_seq &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udp_packet_send
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servreg_hack_list_head
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_servreg_hack_process
</UL>

<P><STRONG><a name="[27c]"></a>get_sensor_index</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sensors.o(i.get_sensor_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_sensor_index
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_changed
</UL>

<P><STRONG><a name="[2]"></a>process_thread_sensors_process</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, sensors.o(i.process_thread_sensors_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = process_thread_sensors_process &rArr; process_post
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_alloc_event
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensors.o(.data)
</UL>
<P><STRONG><a name="[202]"></a>index_from_item</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nbr-table.o(i.index_from_item))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_set_bit
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_get_bit
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_from_item
</UL>

<P><STRONG><a name="[1f7]"></a>index_from_key</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nbr-table.o(i.index_from_key))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_add_lladdr
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_key
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_allocate
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_from_key
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_from_lladdr
</UL>

<P><STRONG><a name="[1f6]"></a>index_from_lladdr</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nbr-table.o(i.index_from_lladdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = index_from_lladdr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_from_key
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_cmp
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_update_lladdr
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_get_from_lladdr
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_add_lladdr
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_allocate
</UL>

<P><STRONG><a name="[200]"></a>item_from_index</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nbr-table.o(i.item_from_index))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_get_from_lladdr
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_add_lladdr
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_from_key
</UL>

<P><STRONG><a name="[1ff]"></a>item_from_key</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nbr-table.o(i.item_from_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = item_from_key
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_from_index
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_from_key
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_next
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_head
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_key
</UL>

<P><STRONG><a name="[203]"></a>key_from_index</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nbr-table.o(i.key_from_index))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_update_lladdr
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_allocate
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_from_item
</UL>

<P><STRONG><a name="[201]"></a>key_from_item</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nbr-table.o(i.key_from_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = key_from_item
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_from_index
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_from_item
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_next
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_get_lladdr
</UL>

<P><STRONG><a name="[20f]"></a>nbr_get_bit</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nbr-table.o(i.nbr_get_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_from_item
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_next
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_head
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_get_from_lladdr
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_key
</UL>

<P><STRONG><a name="[210]"></a>nbr_set_bit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nbr-table.o(i.nbr_set_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nbr_set_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_from_item
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_unlock
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_remove
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_lock
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_add_lladdr
</UL>

<P><STRONG><a name="[211]"></a>nbr_table_allocate</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, nbr-table.o(i.nbr_table_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = nbr_table_allocate &rArr; rpl_nbr_policy_find_removable &rArr; find_removable_dao &rArr; update_nbr &rArr; uip_ds6_route_is_nexthop &rArr; uip_ds6_nbr_lladdr_from_ipaddr &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_nbr_policy_find_removable
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_key
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_from_index
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_from_lladdr
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_from_key
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_alloc
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_add_lladdr
</UL>

<P><STRONG><a name="[213]"></a>remove_key</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, nbr-table.o(i.remove_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = remove_key &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_get_bit
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_from_key
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_from_key
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_update_lladdr
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_allocate
</UL>

<P><STRONG><a name="[61]"></a>periodic</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, link-stats.o(i.periodic))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = periodic &rArr; ctimer_reset &rArr; etimer_reset &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_next
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_head
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> link-stats.o(i.link_stats_init)
</UL>
<P><STRONG><a name="[3]"></a>process_thread_simple_udp_process</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, simple-udp.o(i.process_thread_simple_udp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = process_thread_simple_udp_process &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> simple-udp.o(.data)
</UL>
<P><STRONG><a name="[1c1]"></a>eventhandler</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, tcpip.o(i.eventhandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = eventhandler &rArr; tcpip_ipv6_output &rArr; rpl_update_header &rArr; insert_hbh_header &rArr; update_hbh_header &rArr; dao_output_target &rArr; dao_output_target_seq &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_expired
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_unlisten
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_periodic
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_restart
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_ipv6_output
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_periodic_tcp_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_tcpip_process
</UL>

<P><STRONG><a name="[4]"></a>process_thread_tcpip_process</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, tcpip.o(i.process_thread_tcpip_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = process_thread_tcpip_process &rArr; eventhandler &rArr; tcpip_ipv6_output &rArr; rpl_update_header &rArr; insert_hbh_header &rArr; update_hbh_header &rArr; dao_output_target &rArr; dao_output_target_seq &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_alloc_event
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(.data)
</UL>
<P><STRONG><a name="[1c7]"></a>start_periodic_tcp_timer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tcpip.o(i.start_periodic_tcp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = start_periodic_tcp_timer &rArr; etimer_restart &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_expired
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_restart
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_uipcall
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventhandler
</UL>

<P><STRONG><a name="[169]"></a>add_fragment</STRONG> (Thumb, 306 bytes, Stack size 48 bytes, sicslowpan.o(i.add_fragment))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = add_fragment &rArr; store_fragment &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_addr
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_copy
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_cmp
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expired
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_fragment
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_fragments
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input
</UL>

<P><STRONG><a name="[2a1]"></a>addr_context_lookup_by_number</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sicslowpan.o(i.addr_context_lookup_by_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = addr_context_lookup_by_number
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uncompress_hdr_iphc
</UL>

<P><STRONG><a name="[176]"></a>addr_context_lookup_by_prefix</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sicslowpan.o(i.addr_context_lookup_by_prefix))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = addr_context_lookup_by_prefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compress_hdr_iphc
</UL>

<P><STRONG><a name="[16e]"></a>clear_fragments</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, sicslowpan.o(i.clear_fragments))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = clear_fragments
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_frags2uip
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_fragment
</UL>

<P><STRONG><a name="[18a]"></a>compress_addr_64</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, sicslowpan.o(i.compress_addr_64))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = compress_addr_64
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compress_hdr_iphc
</UL>

<P><STRONG><a name="[189]"></a>compress_hdr_iphc</STRONG> (Thumb, 828 bytes, Stack size 40 bytes, sicslowpan.o(i.compress_hdr_iphc))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = compress_hdr_iphc &rArr; addr_context_lookup_by_prefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compress_addr_64
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_context_lookup_by_prefix
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output
</UL>

<P><STRONG><a name="[18c]"></a>copy_frags2uip</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, sicslowpan.o(i.copy_frags2uip))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = copy_frags2uip &rArr; clear_fragments
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_fragments
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input
</UL>

<P><STRONG><a name="[6f]"></a>input</STRONG> (Thumb, 464 bytes, Stack size 40 bytes, sicslowpan.o(i.input))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = input &rArr; link_stats_input_callback &rArr; nbr_table_add_lladdr &rArr; nbr_table_allocate &rArr; rpl_nbr_policy_find_removable &rArr; find_removable_dao &rArr; update_nbr &rArr; uip_ds6_route_is_nexthop &rArr; uip_ds6_nbr_lladdr_from_ipaddr &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_dataptr
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_datalen
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_attr
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_addr
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_stats_input_callback
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uncompress_hdr_iphc
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_packet_attrs
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_frags2uip
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_fragment
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sicslowpan.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>output</STRONG> (Thumb, 438 bytes, Stack size 40 bytes, sicslowpan.o(i.output))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = output &rArr; compress_hdr_iphc &rArr; addr_context_lookup_by_prefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_set_datalen
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_set_addr
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_dataptr
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_clear
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_copy
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_to_packetbuf
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_numfree
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_new_from_packetbuf
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_free
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_packet_attrs
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compress_hdr_iphc
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sicslowpan.o(i.sicslowpan_init)
</UL>
<P><STRONG><a name="[68]"></a>packet_sent</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sicslowpan.o(i.packet_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = packet_sent &rArr; uip_ds6_link_neighbor_callback &rArr; link_stats_packet_sent &rArr; nbr_table_add_lladdr &rArr; nbr_table_allocate &rArr; rpl_nbr_policy_find_removable &rArr; find_removable_dao &rArr; update_nbr &rArr; uip_ds6_route_is_nexthop &rArr; uip_ds6_nbr_lladdr_from_ipaddr &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_link_neighbor_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sicslowpan.o(i.send_packet)
</UL>
<P><STRONG><a name="[21f]"></a>send_packet</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sicslowpan.o(i.send_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = send_packet &rArr; packetbuf_set_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_set_addr
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_periodic
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output
</UL>

<P><STRONG><a name="[1fb]"></a>set_packet_attrs</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sicslowpan.o(i.set_packet_attrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_packet_attrs
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_set_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input
</UL>

<P><STRONG><a name="[16c]"></a>store_fragment</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, sicslowpan.o(i.store_fragment))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = store_fragment &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_datalen
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_fragment
</UL>

<P><STRONG><a name="[2a0]"></a>uncompress_addr</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, sicslowpan.o(i.uncompress_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uncompress_addr &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_set_addr_iid
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uncompress_hdr_iphc
</UL>

<P><STRONG><a name="[1fa]"></a>uncompress_hdr_iphc</STRONG> (Thumb, 720 bytes, Stack size 40 bytes, sicslowpan.o(i.uncompress_hdr_iphc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uncompress_hdr_iphc &rArr; uncompress_addr &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_datalen
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_addr
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uncompress_addr
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_context_lookup_by_number
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input
</UL>

<P><STRONG><a name="[2a2]"></a>chksum</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, uip6.o(i.chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
</UL>

<P><STRONG><a name="[1c8]"></a>ext_hdr_options_process</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, uip6.o(i.ext_hdr_options_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ext_hdr_options_process &rArr; rpl_verify_hbh_header &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_error_output
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_verify_hbh_header
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[28b]"></a>uip_add_rcv_nxt</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, uip6.o(i.uip_add_rcv_nxt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = uip_add_rcv_nxt &rArr; uip_add32
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add32
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[29c]"></a>upper_layer_chksum</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, uip6.o(i.upper_layer_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = upper_layer_chksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udpchksum
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6chksum
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_tcpchksum
</UL>

<P><STRONG><a name="[17f]"></a>call_route_callback</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, uip-ds6-route.o(i.call_route_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = call_route_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_length
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_rm
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_add
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_rm
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_add
</UL>

<P><STRONG><a name="[245]"></a>rm_routelist</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, uip-ds6-route.o(i.rm_routelist))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rm_routelist &rArr; uip_ds6_route_rm &rArr; uip_debug_ipaddr_print &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_remove
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_rm
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm_routelist_callback
</UL>

<P><STRONG><a name="[6c]"></a>rm_routelist_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uip-ds6-route.o(i.rm_routelist_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rm_routelist_callback &rArr; rm_routelist &rArr; uip_ds6_route_rm &rArr; uip_debug_ipaddr_print &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm_routelist
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uip-ds6-route.o(i.uip_ds6_route_init)
</UL>
<P><STRONG><a name="[6]"></a>echo_reply_input</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, uip-icmp6.o(i.echo_reply_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = echo_reply_input &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uip-icmp6.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>echo_request_input</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, uip-icmp6.o(i.echo_request_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = echo_request_input &rArr; uip_ds6_select_src &rArr; get_match_length
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_select_src
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6chksum
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uip-icmp6.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>ns_input</STRONG> (Thumb, 516 bytes, Stack size 56 bytes, uip-nd6.o(i.ns_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ns_input &rArr; uip_ds6_nbr_add &rArr; nbr_table_add_lladdr &rArr; nbr_table_allocate &rArr; rpl_nbr_policy_find_removable &rArr; find_removable_dao &rArr; update_nbr &rArr; uip_ds6_route_is_nexthop &rArr; uip_ds6_nbr_lladdr_from_ipaddr &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_update_lladdr
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_lookup
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_get_ll
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_addr_lookup
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6chksum
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_add
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uip-nd6.o(.data)
</UL>
<P><STRONG><a name="[70]"></a>init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nullsec.o(i.init))
<BR>[Address Reference Count : 1]<UL><LI> nullsec.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>input</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nullsec.o(i.input))
<BR>[Address Reference Count : 1]<UL><LI> nullsec.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>send</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nullsec.o(i.send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = send
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_set_attr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nullsec.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>channel_check_interval</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, csma.o(i.channel_check_interval))
<BR>[Address Reference Count : 1]<UL><LI> csma.o(.constdata)
</UL>
<P><STRONG><a name="[1dc]"></a>free_packet</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, csma.o(i.free_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = free_packet &rArr; schedule_transmission &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_free
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_free
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_stop
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_transmission
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done
</UL>

<P><STRONG><a name="[73]"></a>init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, csma.o(i.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init &rArr; memb_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csma.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>input_packet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, csma.o(i.input_packet))
<BR>[Address Reference Count : 1]<UL><LI> csma.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>off</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, csma.o(i.off))
<BR>[Address Reference Count : 1]<UL><LI> csma.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>on</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, csma.o(i.on))
<BR>[Address Reference Count : 1]<UL><LI> csma.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>packet_sent</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, csma.o(i.packet_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = packet_sent &rArr; tx_done &rArr; free_packet &rArr; schedule_transmission &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_attr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_attr
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rexmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csma.o(i.transmit_packet_list)
</UL>
<P><STRONG><a name="[224]"></a>rexmit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, csma.o(i.rexmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rexmit &rArr; schedule_transmission &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_update_attr_from_packetbuf
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_transmission
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_sent
</UL>

<P><STRONG><a name="[1df]"></a>schedule_transmission</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, csma.o(i.schedule_transmission))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = schedule_transmission &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_rand
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rexmit
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_packet
</UL>

<P><STRONG><a name="[74]"></a>send_packet</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, csma.o(i.send_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = send_packet &rArr; schedule_transmission &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_set_attr
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_attr
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_addr
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_copy
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_cmp
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_length
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_rand
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_free
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_alloc
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_new_from_packetbuf
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_call_sent_callback
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_transmission
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csma.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>transmit_packet_list</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, csma.o(i.transmit_packet_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = transmit_packet_list
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csma.o(i.schedule_transmission)
</UL>
<P><STRONG><a name="[223]"></a>tx_done</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, csma.o(i.tx_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tx_done &rArr; free_packet &rArr; schedule_transmission &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_call_sent_callback
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_sent
</UL>

<P><STRONG><a name="[1cd]"></a>addr_len</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, frame802154.o(i.addr_len))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_len
</UL>

<P><STRONG><a name="[1cb]"></a>field_len</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, frame802154.o(i.field_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = field_len &rArr; frame802154_has_panid
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_has_panid
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_len
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_hdrlen
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_create
</UL>

<P><STRONG><a name="[7a]"></a>create</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, framer-802154.o(i.create))
<BR>[Address Reference Count : 1]<UL><LI> framer-802154.o(.constdata)
</UL>
<P><STRONG><a name="[18d]"></a>create_frame</STRONG> (Thumb, 280 bytes, Stack size 88 bytes, framer-802154.o(i.create_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = create_frame &rArr; frame802154_create &rArr; field_len &rArr; frame802154_has_panid
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_set_attr
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_holds_broadcast
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_hdrptr
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_hdralloc
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_dataptr
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_datalen
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_attr
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_addr
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_copy
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_rand
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_hdrlen
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_get_pan_id
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_create
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdr_length
</UL>

<P><STRONG><a name="[79]"></a>hdr_length</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, framer-802154.o(i.hdr_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = hdr_length &rArr; create_frame &rArr; frame802154_create &rArr; field_len &rArr; frame802154_has_panid
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> framer-802154.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>parse</STRONG> (Thumb, 142 bytes, Stack size 80 bytes, framer-802154.o(i.parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = parse &rArr; frame802154_parse &rArr; frame802154_has_panid
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_set_attr
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_set_addr
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_hdrreduce
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_dataptr
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_datalen
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_parse
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_is_broadcast_addr
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_get_pan_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> framer-802154.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>channel_check_interval</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nullrdc.o(i.channel_check_interval))
<BR>[Address Reference Count : 1]<UL><LI> nullrdc.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nullrdc.o(i.init))
<BR>[Address Reference Count : 1]<UL><LI> nullrdc.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>off</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nullrdc.o(i.off))
<BR>[Address Reference Count : 1]<UL><LI> nullrdc.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>on</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nullrdc.o(i.on))
<BR>[Address Reference Count : 1]<UL><LI> nullrdc.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>packet_input</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nullrdc.o(i.packet_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = packet_input &rArr; packetbuf_holds_broadcast &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_holds_broadcast
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_addr
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_cmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nullrdc.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>send_list</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nullrdc.o(i.send_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = send_list &rArr; queuebuf_to_packetbuf &rArr; packetbuf_copyfrom &rArr; packetbuf_clear &rArr; packetbuf_attr_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_to_packetbuf
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_one_packet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nullrdc.o(.constdata)
</UL>
<P><STRONG><a name="[278]"></a>send_one_packet</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, nullrdc.o(i.send_one_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = send_one_packet &rArr; mac_call_sent_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_totlen
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_set_addr
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_hdrptr
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_call_sent_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_list
</UL>

<P><STRONG><a name="[7d]"></a>send_packet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nullrdc.o(i.send_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = send_packet &rArr; send_one_packet &rArr; mac_call_sent_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_one_packet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nullrdc.o(.constdata)
</UL>
<P><STRONG><a name="[26b]"></a>acceptable_rank</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rpl-dag.o(i.acceptable_rank))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_select_dag
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_parent_event
</UL>

<P><STRONG><a name="[171]"></a>add_nbr_from_dio</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rpl-dag.o(i.add_nbr_from_dio))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = add_nbr_from_dio &rArr; rpl_icmp6_update_nbr_table &rArr; uip_ds6_nbr_add &rArr; nbr_table_add_lladdr &rArr; nbr_table_allocate &rArr; rpl_nbr_policy_find_removable &rArr; find_removable_dao &rArr; update_nbr &rArr; uip_ds6_route_is_nexthop &rArr; uip_ds6_nbr_lladdr_from_ipaddr &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_icmp6_update_nbr_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_dio
</UL>

<P><STRONG><a name="[178]"></a>best_parent</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, rpl-dag.o(i.best_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = best_parent &rArr; rpl_parent_is_fresh &rArr; rpl_get_parent_link_stats &rArr; link_stats_from_lladdr &rArr; nbr_table_get_from_lladdr &rArr; index_from_lladdr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_next
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_head
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_parent_is_fresh
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_select_parent
</UL>

<P><STRONG><a name="[183]"></a>check_prefix</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, rpl-dag.o(i.check_prefix))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = check_prefix &rArr; uip_ds6_addr_add &rArr; uip_ds6_maddr_add &rArr; uip_ds6_list_loop &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_addr_add
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_addr_lookup
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_addr_rm
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ip_from_prefix
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_prefix
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_select_dag
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_join_instance
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_free_dag
</UL>

<P><STRONG><a name="[1ce]"></a>find_parent_any_dag_any_instance</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rpl-dag.o(i.find_parent_any_dag_any_instance))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = find_parent_any_dag_any_instance &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_get_from_lladdr
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_lookup
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_get_ll
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_find_parent
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_parent_dag
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_find_parent_any_dag
</UL>

<P><STRONG><a name="[1d2]"></a>find_parent_dag</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rpl-dag.o(i.find_parent_dag))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = find_parent_dag &rArr; find_parent_any_dag_any_instance &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_parent_any_dag_any_instance
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_dio
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_dag
</UL>

<P><STRONG><a name="[1e5]"></a>global_repair</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, rpl-dag.o(i.global_repair))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = global_repair &rArr; rpl_process_parent_event &rArr; rpl_local_repair &rArr; rpl_nullify_parent &rArr; dao_output &rArr; dao_output_target &rArr; dao_output_target_seq &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_rank_via_parent
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_parent_event
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_parent
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_parents
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_dio
</UL>

<P><STRONG><a name="[267]"></a>lollipop_greater_than</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, rpl-dag.o(i.lollipop_greater_than))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_dio
</UL>

<P><STRONG><a name="[63]"></a>nbr_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rpl-dag.o(i.nbr_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = nbr_callback &rArr; rpl_remove_parent &rArr; rpl_nullify_parent &rArr; dao_output &rArr; dao_output_target &rArr; dao_output_target_seq &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_parent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpl-dag.o(i.rpl_dag_init)
</UL>
<P><STRONG><a name="[1e6]"></a>remove_parents</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, rpl-dag.o(i.remove_parents))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = remove_parents &rArr; rpl_remove_parent &rArr; rpl_nullify_parent &rArr; dao_output &rArr; dao_output_target &rArr; dao_output_target_seq &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_next
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_head
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;global_repair
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_free_dag
</UL>

<P><STRONG><a name="[24d]"></a>rpl_set_preferred_parent</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rpl-dag.o(i.rpl_set_preferred_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rpl_set_preferred_parent &rArr; nbr_table_unlock &rArr; nbr_set_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_unlock
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_select_parent
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_select_dag
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_nullify_parent
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_move_parent
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_join_instance
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_dag
</UL>

<P><STRONG><a name="[184]"></a>set_ip_from_prefix</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rpl-dag.o(i.set_ip_from_prefix))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_ip_from_prefix &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_set_addr_iid
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_prefix
</UL>

<P><STRONG><a name="[1fd]"></a>insert_hbh_header</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, rpl-ext-header.o(i.insert_hbh_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = insert_hbh_header &rArr; update_hbh_header &rArr; dao_output_target &rArr; dao_output_target_seq &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_hbh_header
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_update_header
</UL>

<P><STRONG><a name="[1fe]"></a>update_hbh_header</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, rpl-ext-header.o(i.update_hbh_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = update_hbh_header &rArr; dao_output_target &rArr; dao_output_target_seq &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_addr
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_lookup
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_parent
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_instance
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_output_target
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_update_header
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_hbh_header
</UL>

<P><STRONG><a name="[b]"></a>dao_ack_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rpl-icmp6.o(i.dao_ack_input))
<BR>[Address Reference Count : 1]<UL><LI> rpl-icmp6.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>dao_input</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rpl-icmp6.o(i.dao_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = dao_input &rArr; dao_input_storing &rArr; rpl_add_route &rArr; uip_ds6_route_add &rArr; nbr_table_add_lladdr &rArr; nbr_table_allocate &rArr; rpl_nbr_policy_find_removable &rArr; find_removable_dao &rArr; update_nbr &rArr; uip_ds6_route_is_nexthop &rArr; uip_ds6_nbr_lladdr_from_ipaddr &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_instance
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_input_storing
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpl-icmp6.o(.data)
</UL>
<P><STRONG><a name="[1a6]"></a>dao_input_storing</STRONG> (Thumb, 570 bytes, Stack size 88 bytes, rpl-icmp6.o(i.dao_input_storing))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = dao_input_storing &rArr; rpl_add_route &rArr; uip_ds6_route_add &rArr; nbr_table_add_lladdr &rArr; nbr_table_allocate &rArr; rpl_nbr_policy_find_removable &rArr; find_removable_dao &rArr; update_nbr &rArr; uip_ds6_route_is_nexthop &rArr; uip_ds6_nbr_lladdr_from_ipaddr &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_nexthop
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_lookup
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_send
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_icmp6_update_nbr_table
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_parent_ipaddr
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_instance
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_find_parent
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_route
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_for_dao_fwd
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_input
</UL>

<P><STRONG><a name="[1b0]"></a>dao_output_target_seq</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, rpl-icmp6.o(i.dao_output_target_seq))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = dao_output_target_seq &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_send
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_parent_ipaddr
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_mode
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_output_target
</UL>

<P><STRONG><a name="[9]"></a>dio_input</STRONG> (Thumb, 554 bytes, Stack size 144 bytes, rpl-icmp6.o(i.dio_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = dio_input &rArr; rpl_process_dio &rArr; rpl_add_dag &rArr; rpl_process_parent_event &rArr; rpl_local_repair &rArr; rpl_nullify_parent &rArr; dao_output &rArr; dao_output_target &rArr; dao_output_target_seq &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_dio
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get32
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get16
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpl-icmp6.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>dis_input</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, rpl-icmp6.o(i.dis_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = dis_input &rArr; rpl_icmp6_update_nbr_table &rArr; uip_ds6_nbr_add &rArr; nbr_table_add_lladdr &rArr; nbr_table_allocate &rArr; rpl_nbr_policy_find_removable &rArr; find_removable_dao &rArr; update_nbr &rArr; uip_ds6_route_is_nexthop &rArr; uip_ds6_nbr_lladdr_from_ipaddr &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_reset_dio_timer
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_icmp6_update_nbr_table
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dio_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpl-icmp6.o(.data)
</UL>
<P><STRONG><a name="[1b2]"></a>get16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rpl-icmp6.o(i.get16))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dio_input
</UL>

<P><STRONG><a name="[1b3]"></a>get32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rpl-icmp6.o(i.get32))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dio_input
</UL>

<P><STRONG><a name="[1ac]"></a>prepare_for_dao_fwd</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rpl-icmp6.o(i.prepare_for_dao_fwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prepare_for_dao_fwd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_input_storing
</UL>

<P><STRONG><a name="[1b6]"></a>set16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rpl-icmp6.o(i.set16))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dio_output
</UL>

<P><STRONG><a name="[1b7]"></a>set32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rpl-icmp6.o(i.set32))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dio_output
</UL>

<P><STRONG><a name="[12]"></a>best_dag</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rpl-mrhof.o(i.best_dag))
<BR>[Address Reference Count : 1]<UL><LI> rpl-mrhof.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>best_parent</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, rpl-mrhof.o(i.best_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = best_parent &rArr; parent_is_acceptable &rArr; parent_path_cost &rArr; parent_link_metric &rArr; rpl_get_parent_link_stats &rArr; link_stats_from_lladdr &rArr; nbr_table_get_from_lladdr &rArr; index_from_lladdr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parent_path_cost
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parent_is_acceptable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpl-mrhof.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>parent_has_usable_link</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rpl-mrhof.o(i.parent_has_usable_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = parent_has_usable_link &rArr; parent_link_metric &rArr; rpl_get_parent_link_stats &rArr; link_stats_from_lladdr &rArr; nbr_table_get_from_lladdr &rArr; index_from_lladdr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parent_link_metric
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpl-mrhof.o(.data)
</UL>
<P><STRONG><a name="[17c]"></a>parent_is_acceptable</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rpl-mrhof.o(i.parent_is_acceptable))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = parent_is_acceptable &rArr; parent_path_cost &rArr; parent_link_metric &rArr; rpl_get_parent_link_stats &rArr; link_stats_from_lladdr &rArr; nbr_table_get_from_lladdr &rArr; index_from_lladdr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parent_path_cost
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parent_link_metric
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;best_parent
</UL>

<P><STRONG><a name="[d]"></a>parent_link_metric</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rpl-mrhof.o(i.parent_link_metric))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = parent_link_metric &rArr; rpl_get_parent_link_stats &rArr; link_stats_from_lladdr &rArr; nbr_table_get_from_lladdr &rArr; index_from_lladdr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_parent_link_stats
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parent_path_cost
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parent_is_acceptable
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parent_has_usable_link
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpl-mrhof.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>parent_path_cost</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rpl-mrhof.o(i.parent_path_cost))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = parent_path_cost &rArr; parent_link_metric &rArr; rpl_get_parent_link_stats &rArr; link_stats_from_lladdr &rArr; nbr_table_get_from_lladdr &rArr; index_from_lladdr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parent_link_metric
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rank_via_parent
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parent_is_acceptable
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;best_parent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpl-mrhof.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>rank_via_parent</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rpl-mrhof.o(i.rank_via_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = rank_via_parent &rArr; parent_path_cost &rArr; parent_link_metric &rArr; rpl_get_parent_link_stats &rArr; link_stats_from_lladdr &rArr; nbr_table_get_from_lladdr &rArr; index_from_lladdr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parent_path_cost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpl-mrhof.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rpl-mrhof.o(i.reset))
<BR>[Address Reference Count : 1]<UL><LI> rpl-mrhof.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>update_metric_container</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rpl-mrhof.o(i.update_metric_container))
<BR>[Address Reference Count : 1]<UL><LI> rpl-mrhof.o(.data)
</UL>
<P><STRONG><a name="[5f]"></a>handle_dao_timer</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, rpl-timers.o(i.handle_dao_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = handle_dao_timer &rArr; dao_output &rArr; dao_output_target &rArr; dao_output_target_seq &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_expired
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_set
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_stop
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_get_link_local
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_output
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dao_lifetime_timer
</UL>
<BR>[Address Reference Count : 3]<UL><LI> rpl-timers.o(i.schedule_dao)
<LI> rpl-timers.o(i.set_dao_lifetime_timer)
<LI> rpl-timers.o(i.handle_dao_timer)
</UL>
<P><STRONG><a name="[60]"></a>handle_dio_timer</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, rpl-timers.o(i.handle_dio_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = handle_dio_timer &rArr; dio_output &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_set
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_get_link_local
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_dio_interval
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dio_output
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rpl-timers.o(i.new_dio_interval)
<LI> rpl-timers.o(i.handle_dio_timer)
</UL>
<P><STRONG><a name="[64]"></a>handle_periodic_timer</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rpl-timers.o(i.handle_periodic_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = handle_periodic_timer &rArr; rpl_recalculate_ranks &rArr; rpl_process_parent_event &rArr; rpl_local_repair &rArr; rpl_nullify_parent &rArr; dao_output &rArr; dao_output_target &rArr; dao_output_target_seq &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_reset
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_recalculate_ranks
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_any_dag
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_purge_routes
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_purge_dags
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpl-timers.o(i.rpl_reset_periodic_timer)
</UL>
<P><STRONG><a name="[65]"></a>handle_probing_timer</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rpl-timers.o(i.handle_probing_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = handle_probing_timer &rArr; dio_output &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_schedule_probing
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_parent_link_stats
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_parent_ipaddr
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_probing_target
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dio_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpl-timers.o(i.rpl_schedule_probing)
</UL>
<P><STRONG><a name="[66]"></a>handle_unicast_dio_timer</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rpl-timers.o(i.handle_unicast_dio_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = handle_unicast_dio_timer &rArr; dio_output &rArr; uip_icmp6_send &rArr;  tcpip_ipv6_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_parent_ipaddr
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dio_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpl-timers.o(i.rpl_schedule_unicast_dio_immediately)
</UL>
<P><STRONG><a name="[1eb]"></a>new_dio_interval</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, rpl-timers.o(i.new_dio_interval))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_rand
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_reset_dio_timer
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dio_timer
</UL>

<P><STRONG><a name="[271]"></a>schedule_dao</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rpl-timers.o(i.schedule_dao))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = schedule_dao &rArr; set_dao_lifetime_timer &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_expired
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_rand
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_set
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_mode
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_expiration_time
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dao_lifetime_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_schedule_dao
</UL>

<P><STRONG><a name="[1ea]"></a>set_dao_lifetime_timer</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rpl-timers.o(i.set_dao_lifetime_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = set_dao_lifetime_timer &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_rand
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_set
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_dao
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dao_timer
</UL>

<P><STRONG><a name="[6d]"></a>handle_periodic_timer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rpl-nbr-policy.o(i.handle_periodic_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = handle_periodic_timer &rArr; update_nbr &rArr; uip_ds6_route_is_nexthop &rArr; uip_ds6_nbr_lladdr_from_ipaddr &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_restart
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_nbr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpl-nbr-policy.o(i.update_nbr)
</UL>
<P><STRONG><a name="[1d4]"></a>update_nbr</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, rpl-nbr-policy.o(i.update_nbr))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = update_nbr &rArr; uip_ds6_route_is_nexthop &rArr; uip_ds6_nbr_lladdr_from_ipaddr &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_next
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_head
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_get_lladdr
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_set
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_is_nexthop
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_removable_dis
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_removable_dio
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_removable_dao
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_periodic_timer
</UL>

<P><STRONG><a name="[14]"></a>process_thread_ctimer_process</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ctimer.o(i.process_thread_ctimer_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = process_thread_ctimer_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctimer.o(.data)
</UL>
<P><STRONG><a name="[173]"></a>add_timer</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, etimer.o(i.add_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_poll
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_time
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_reset
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_restart
</UL>

<P><STRONG><a name="[15]"></a>process_thread_etimer_process</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, etimer.o(i.process_thread_etimer_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = process_thread_etimer_process &rArr; process_post
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_poll
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expired
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> etimer.o(.data)
</UL>
<P><STRONG><a name="[175]"></a>update_time</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, etimer.o(i.update_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_etimer_process
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_stop
</UL>

<P><STRONG><a name="[17d]"></a>call_process</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, process.o(i.call_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_process
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post_synch
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_process
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_poll
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_event
</UL>

<P><STRONG><a name="[1ba]"></a>do_event</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, process.o(i.do_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = do_event &rArr; do_poll &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_poll
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_process
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_run
</UL>

<P><STRONG><a name="[1bb]"></a>do_poll</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, process.o(i.do_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = do_poll &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_process
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_run
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_event
</UL>

<P><STRONG><a name="[17e]"></a>exit_process</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, process.o(i.exit_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_process
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_process
</UL>

<P><STRONG><a name="[84]"></a>configure</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, button-sensor.o(i.configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = configure &rArr; BSP_PB_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button-sensor.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>status</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, button-sensor.o(i.status))
<BR>[Address Reference Count : 1]<UL><LI> button-sensor.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>value</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, button-sensor.o(i.value))
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_GetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button-sensor.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>configure</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, radio-sensor.o(i.configure))
<BR>[Address Reference Count : 1]<UL><LI> radio-sensor.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>status</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, radio-sensor.o(i.status))
<BR>[Address Reference Count : 1]<UL><LI> radio-sensor.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>value</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, radio-sensor.o(i.value))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = value &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_attr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio-sensor.o(.constdata)
</UL>
<P><STRONG><a name="[15b]"></a>print_parameters</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, contiki-spirit1-main.o(i.print_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = print_parameters &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stack_6LoWPAN_Init
</UL>

<P><STRONG><a name="[16]"></a>process_thread_spirit_radio_process</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, spirit1.o(i.process_thread_spirit_radio_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = process_thread_spirit_radio_process &rArr; spirit1_interrupt_callback &rArr; SpiritPktBasicGetReceivedPktLength &rArr; SpiritPktCommonGetControlLength &rArr; RadioSpiReadRegisters &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritCmdStrobeCommand
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit1_interrupt_callback
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_set_datalen
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_dataptr
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_clear
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_poll
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_now
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit1_arch_refresh_status
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spirit1.o(.data)
</UL>
<P><STRONG><a name="[8e]"></a>spirit_radio_channel_clear</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, spirit1.o(i.spirit_radio_channel_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = spirit_radio_channel_clear &rArr; spirit_radio_off &rArr; SpiritIrqClearStatus &rArr; RadioSpiReadRegisters &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRefreshStatus
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritIrqClearStatus
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritCmdStrobeCommand
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritQiGetRssi
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGpioInterruptCmd
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_now
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit1_arch_refresh_status
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_on
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spirit1.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>spirit_radio_init</STRONG> (Thumb, 278 bytes, Stack size 56 bytes, spirit1.o(i.spirit_radio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = spirit_radio_init &rArr; SpiritRadioInit &rArr; SpiritRadioSetFrequencyBase &rArr; SpiritManagementWaVcoCalibration &rArr; SpiritManagementSetFrequencyBase &rArr; SpiritCalibrationSelectVco &rArr; RadioSpiWriteRegisters &rArr; SPI_Write &rArr; RadioSpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritPktBasicInit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritIrqDeInit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritIrqClearStatus
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritIrq
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritGpioInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritCmdStrobeCommand
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritQiSqiCheck
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritQiSetSqiThreshold
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritQiSetRssiThresholddBm
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritTimerSetRxTimeoutStopCondition
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritTimerSetRxTimeoutCounter
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSetXtalFrequency
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSetPALeveldBm
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioSetPALevelMaxIndex
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioPersistenRx
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritRadioAFCFreezeOnSync
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiInit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGpioInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_start
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_now
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spirit1.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>spirit_radio_off</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, spirit1.o(i.spirit_radio_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = spirit_radio_off &rArr; SpiritIrqClearStatus &rArr; RadioSpiReadRegisters &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritIrqClearStatus
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritCmdStrobeCommand
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGpioInterruptCmd
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_now
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit1_arch_refresh_status
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_channel_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spirit1.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>spirit_radio_on</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, spirit1.o(i.spirit_radio_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = spirit_radio_on &rArr; SpiritCmdStrobeCommand &rArr; RadioSpiCommandStrobes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritCmdStrobeCommand
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGpioInterruptCmd
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_now
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit1_arch_refresh_status
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_channel_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spirit1.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>spirit_radio_pending_packet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spirit1.o(i.spirit_radio_pending_packet))
<BR>[Address Reference Count : 1]<UL><LI> spirit1.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>spirit_radio_prepare</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, spirit1.o(i.spirit_radio_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = spirit_radio_prepare &rArr; SpiritPktBasicSetPayloadLength &rArr; RadioSpiWriteRegisters &rArr; SPI_Write &rArr; RadioSpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritPktBasicSetPayloadLength
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritCmdStrobeCommand
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSpiWriteFifo
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGpioInterruptCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spirit1.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>spirit_radio_read</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, spirit1.o(i.spirit_radio_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = spirit_radio_read &rArr; SpiritCmdStrobeCommand &rArr; RadioSpiCommandStrobes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritCmdStrobeCommand
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGpioInterruptCmd
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_set_attr
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_now
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit1_arch_refresh_status
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_spirit_radio_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spirit1.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>spirit_radio_receiving_packet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spirit1.o(i.spirit_radio_receiving_packet))
<BR>[Address Reference Count : 1]<UL><LI> spirit1.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>spirit_radio_send</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, spirit1.o(i.spirit_radio_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = spirit_radio_send &rArr; spirit_radio_prepare &rArr; SpiritPktBasicSetPayloadLength &rArr; RadioSpiWriteRegisters &rArr; SPI_Write &rArr; RadioSpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_transmit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_prepare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spirit1.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>spirit_radio_transmit</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, spirit1.o(i.spirit_radio_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = spirit_radio_transmit &rArr; spirit_set_ready_state &rArr; SpiritIrqClearStatus &rArr; RadioSpiReadRegisters &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritIrqClearStatus
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiritCmdStrobeCommand
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGpioInterruptCmd
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_now
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit1_arch_refresh_status
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_set_ready_state
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spirit_radio_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spirit1.o(.constdata)
</UL>
<P><STRONG><a name="[166]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[168]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[167]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
